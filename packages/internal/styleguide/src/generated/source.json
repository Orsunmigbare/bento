{"Alert":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled, { css } from \"styled-components\"\r\nimport Flag from \"../Layout/Flag/Flag\"\r\nimport Warning from \"../Icons/Warning\"\r\nimport Success from \"../Icons/Success\"\r\nimport Info from \"../Icons/Info\"\r\nimport { color, applyVariants, borderRadius, spacing } from \"../../theming\"\r\nimport { themePropTypes, commonPropTypes } from \"../../constants/themeContants\"\r\nimport ThemeComponent from \"../Theme/ThemeComponent\"\r\n\r\nconst tProps = {\r\n  alert: {\r\n    name: \"ALERT\",\r\n    description: \"Alert style\",\r\n    type: themePropTypes.style\r\n  },\r\n  componentAlertInfo: {\r\n    name: \"COMPONENT_ALERT_INFO\",\r\n    description: \"Theme component for info alert\",\r\n    type: themePropTypes.component\r\n  },\r\n  componentAlertWarning: {\r\n    name: \"COMPONENT_ALERT_WARNING\",\r\n    description: \"Theme component for warning alert\",\r\n    type: themePropTypes.component\r\n  },\r\n  componentAlertSuccess: {\r\n    name: \"COMPONENT_ALERT_SUCCESS\",\r\n    description: \"Theme component for success alert\",\r\n    type: themePropTypes.component\r\n  },\r\n  alertInfo: {\r\n    name: \"ALERT_INFO\",\r\n    description: \"Styles for info alert\",\r\n    type: themePropTypes.style\r\n  },\r\n  alertWarning: {\r\n    name: \"ALERT_WARNING\",\r\n    description: \"Styles for warning alert\",\r\n    type: themePropTypes.style\r\n  },\r\n  alertSuccess: {\r\n    name: \"ALERT_SUCCESS\",\r\n    description: \"Styles for success alert\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst Icon = ({ type, props }) => {\r\n  switch (type) {\r\n    case \"info\":\r\n      return (\r\n        <ThemeComponent\r\n          tagName={tProps.componentAlertInfo}\r\n          fallback={Info}\r\n          {...props}\r\n        />\r\n      )\r\n    case \"warning\":\r\n      return (\r\n        <ThemeComponent\r\n          tagName={tProps.componentAlertWarning}\r\n          fallback={Warning}\r\n          {...props}\r\n        />\r\n      )\r\n    case \"success\":\r\n      return (\r\n        <ThemeComponent\r\n          tagName={tProps.componentAlertSuccess}\r\n          fallback={Success}\r\n          {...props}\r\n        />\r\n      )\r\n    default:\r\n      return null\r\n  }\r\n}\r\n\r\nconst colors = ({ type }) => {\r\n  switch (type) {\r\n    case \"warning\":\r\n      return css`\r\n        background-color: ${color(\"warning\")};\r\n        color: ${color(\"white\")};\r\n        ${applyVariants(tProps.alertWarning)};\r\n      `\r\n    case \"success\":\r\n      return css`\r\n        background-color: ${color(\"positive\")};\r\n        color: ${color(\"white\")};\r\n        ${applyVariants(tProps.alertSuccess)};\r\n      `\r\n    case \"info\":\r\n    default:\r\n      return css`\r\n        background-color: ${color(\"line\")};\r\n        color: ${color(\"text\")};\r\n        ${applyVariants(tProps.alertInfo)};\r\n      `\r\n  }\r\n}\r\n\r\nconst Alert = ({ children, type, ...restProps }) => {\r\n  return (\r\n    <AlertElement type={type} role=\"alert\" {...restProps}>\r\n      <Flag small img={<Icon type={type} />}>\r\n        {children}\r\n      </Flag>\r\n    </AlertElement>\r\n  )\r\n}\r\n\r\nconst AlertElement = styled.div`\r\n  width: 100%;\r\n  border-radius: ${borderRadius};\r\n  padding: ${spacing.small};\r\n  ${colors};\r\n  ${applyVariants(tProps.alert)};\r\n`\r\n\r\nAlert.propTypes = {\r\n  /**\r\n   * Component or text to render inside the alert\r\n   */\r\n  children: commonPropTypes.children.isRequired,\r\n  /**\r\n   * Alert type\r\n   * @export\r\n   */\r\n  type: PropTypes.oneOf([\"warning\", \"success\", \"info\"])\r\n}\r\n\r\nAlert.defaultProps = {\r\n  type: \"info\",\r\n  children: \"This is a warning\"\r\n}\r\n\r\nAlert.themeProps = tProps\r\n\r\nexport default Alert\r\n","Anchor":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport { commonPropTypes, themePropTypes } from \"../../constants/themeContants\"\r\nimport { applyVariants } from \"../../theming\"\r\n\r\nconst Anchor = ({ children, className, ...restProps }) => (\r\n  <AComponent className={className} {...restProps}>\r\n    {children}\r\n  </AComponent>\r\n)\r\n\r\nAnchor.themeProps = {\r\n  anchor: {\r\n    name: \"Anchor\",\r\n    description: \"HTML anchor link\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nexport const AComponent = styled.a`\r\n  text-decoration: none;\r\n  color: currentColor;\r\n\r\n  &:hover,\r\n  &:active,\r\n  &:focus {\r\n    text-decoration: none;\r\n    color: currentColor;\r\n    outline: none;\r\n  }\r\n\r\n  ${applyVariants(Anchor.themeProps.anchor)};\r\n`\r\n\r\nAnchor.defaultProps = {\r\n  className: \"\"\r\n}\r\n\r\nAnchor.propTypes = {\r\n  children: commonPropTypes.children.isRequired,\r\n  className: PropTypes.string\r\n}\r\n\r\nexport default Anchor\r\n","Button":"import PropTypes from \"prop-types\"\r\nimport React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport {\r\n  color,\r\n  borderRadius,\r\n  spacing,\r\n  targetSize,\r\n  font,\r\n  fontFamily,\r\n  fontWeight,\r\n  applyVariants\r\n} from \"../../theming\"\r\nimport { themePropTypes, commonPropTypes } from \"../../constants/themeContants\"\r\n\r\nconst tinycolor = require(\"tinycolor2\")\r\n\r\nconst tProps = {\r\n  button: {\r\n    name: \"Button\",\r\n    description: \"Button styles\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst ButtonComp = styled.button`\r\n  background-color: ${color.primary};\r\n  color: ${p =>\r\n    tinycolor\r\n      .mostReadable(color.primary()(p), [\"#fff\"], {\r\n        includeFallbackColors: true,\r\n        level: \"AA\",\r\n        size: \"large\"\r\n      })\r\n      .toString()};\r\n  border-width: 0;\r\n  border-radius: ${borderRadius};\r\n  padding: ${spacing.tiny} ${spacing.medium};\r\n  cursor: pointer;\r\n  min-height: ${targetSize.normal};\r\n  text-decoration: none;\r\n  text-align: center;\r\n  display: inline-block;\r\n  font-size: ${font.base};\r\n  font-family: ${fontFamily.body};\r\n  line-height: 32px;\r\n  font-weight: ${fontWeight.bold};\r\n  white-space: nowrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  transition: background 0.2s ease;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    outline: none;\r\n    background-color: ${p =>\r\n      tinycolor(color.primary()(p))\r\n        .darken(5)\r\n        .toString()};\r\n    color: ${p =>\r\n      tinycolor\r\n        .mostReadable(tinycolor(color.primary()(p)).darken(5), [\"#fff\"], {\r\n          includeFallbackColors: true,\r\n          level: \"AA\",\r\n          size: \"large\"\r\n        })\r\n        .toString()};\r\n  }\r\n\r\n  ${applyVariants(tProps.button.name)};\r\n`\r\n/**\r\n * Button component. Use to click stuff\r\n */\r\nconst Button = props => <ButtonComp {...props} />\r\n\r\nconst defaultProps = {\r\n  children: \"button\",\r\n  onClick: null\r\n}\r\n\r\nconst propTypes = {\r\n  /**\r\n   * The children of the lamb\r\n   */\r\n  children: commonPropTypes.children.isRequired,\r\n  /**\r\n   * Click callback. Why else have a button?\r\n   * @export\r\n   */\r\n  onClick: PropTypes.func\r\n}\r\n\r\nButton.defaultProps = defaultProps\r\nButton.propTypes = propTypes\r\nButton.themeProps = tProps\r\n\r\nexport default Button\r\n","CodeRenderer":"import React, { Component } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Prism from \"prismjs\"\r\nimport CodeWrapper from \"./CodeWrapper\"\r\nimport \"prismjs/components/prism-markup\"\r\n\r\nclass CodeRenderer extends Component {\r\n  render() {\r\n    const { code, language } = this.props\r\n    let grammar = null\r\n    let className = \"\"\r\n\r\n    switch (language) {\r\n      case \"markup\": {\r\n        className = \"language-markup\"\r\n        grammar = Prism.languages.html\r\n        break\r\n      }\r\n\r\n      case \"javascript\": {\r\n        className = \"language-js\"\r\n        grammar = Prism.languages.javascript\r\n        break\r\n      }\r\n\r\n      case \"java\": {\r\n        className = \"language-java\"\r\n        grammar = Prism.languages.java\r\n        break\r\n      }\r\n\r\n      case \"csharp\": {\r\n        className = \"language-csharp\"\r\n        grammar = Prism.languages.csharp\r\n        break\r\n      }\r\n\r\n      default:\r\n        break\r\n    }\r\n\r\n    const html = {\r\n      __html: Prism.highlight(code, grammar, language)\r\n    }\r\n    return (\r\n      <CodeWrapper className={className}>\r\n        <code className={className} dangerouslySetInnerHTML={html} />\r\n      </CodeWrapper>\r\n    )\r\n  }\r\n}\r\n\r\nCodeRenderer.propTypes = {\r\n  code: PropTypes.string.isRequired,\r\n  language: PropTypes.oneOf([\"markup\", \"javascript\", \"java\", \"csharp\"])\r\n    .isRequired\r\n}\r\n\r\nexport default CodeRenderer\r\n","CopyToClipboardComponent":"import PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport CopyToClipboard from \"../../hoc/Clipboard/CopyToClipboard\"\r\nimport React from \"react\"\r\nimport Upload from \"../Icons/Upload\"\r\nimport Check from \"../Icons/Check\"\r\nimport ThemeComponent from \"../Theme/ThemeComponent\"\r\nimport { applyVariants } from \"../../theming\"\r\nimport { themePropTypes, commonPropTypes } from \"../../constants/themeContants\"\r\n\r\nclass CopyToClipboardComponent extends React.PureComponent {\r\n  constructor(props, context) {\r\n    super(props, context)\r\n\r\n    this.handleClick = this.handleClick.bind(this)\r\n\r\n    this.state = {\r\n      copied: false\r\n    }\r\n  }\r\n\r\n  handleClick(copy) {\r\n    copy(this.props.copyText)\r\n    this.setState({ copied: true }, () => {\r\n      setTimeout(() => {\r\n        this.setState({ copied: false })\r\n      }, 1000)\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <CopyToClipboard children={this.props.children}>\r\n        {({ copy }) => (\r\n          <ClipboardWrapper\r\n            onClick={() => {\r\n              this.handleClick(copy)\r\n            }}\r\n          >\r\n            {this.props.children}\r\n            {this.state.copied ? <Copied /> : <Copy />}\r\n          </ClipboardWrapper>\r\n        )}\r\n      </CopyToClipboard>\r\n    )\r\n  }\r\n}\r\n\r\nCopyToClipboardComponent.themeProps = {\r\n  wrapper: {\r\n    name: \"CopyToClipboardComponent_Wrapper\",\r\n    description: \"CopyToClipboardComponent wrapper style\",\r\n    type: themePropTypes.style\r\n  },\r\n  icon: {\r\n    name: \"CopyToClipboardComponent_Icon_style\",\r\n    description: \"Icon style\",\r\n    type: themePropTypes.style\r\n  },\r\n  copyComponent: {\r\n    name: \"CopyToClipboardComponent_CopyComponent\",\r\n    description: \"Copy component\",\r\n    type: themePropTypes.component\r\n  },\r\n  copiedComponent: {\r\n    name: \"CopyToClipboardComponent_CopiedComponent\",\r\n    description: \"Copied component\",\r\n    type: themePropTypes.component\r\n  }\r\n}\r\n\r\nconst ClipboardWrapper = styled.button`\r\n  &:hover {\r\n    outline: none;\r\n  }\r\n  ${applyVariants(CopyToClipboardComponent.themeProps.wrapper)};\r\n`\r\n\r\nconst CopiedComponent = ({ ...props }) => (\r\n  <ThemeComponent\r\n    tagName={CopyToClipboardComponent.themeProps.copiedComponent}\r\n    fallback={Check}\r\n    {...props}\r\n  />\r\n)\r\n\r\nconst CopyComponent = ({ ...props }) => (\r\n  <ThemeComponent\r\n    tagName={CopyToClipboardComponent.themeProps.copyComponent}\r\n    fallback={Upload}\r\n    {...props}\r\n  />\r\n)\r\n\r\nexport const Copy = styled(CopyComponent)`\r\n  ${applyVariants(CopyToClipboardComponent.themeProps.icon)};\r\n`\r\n\r\nexport const Copied = styled(CopiedComponent)`\r\n  ${applyVariants(CopyToClipboardComponent.themeProps.icon)};\r\n`\r\n\r\nCopyToClipboardComponent.propTypes = {\r\n  children: commonPropTypes.children.isRequired,\r\n  copyText: PropTypes.string.isRequired\r\n}\r\n\r\nexport default CopyToClipboardComponent\r\n","Donut":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport { applyVariants, color } from \"../../../theming\"\r\nimport { themePropTypes } from \"../../../constants/themeContants\"\r\n\r\nconst Donut = ({ progress, className, warningThreshold, ...rest }) => {\r\n  const dash = 57\r\n  const dashoffset = dash * progress - dash\r\n  return (\r\n    <Wrapper\r\n      viewBox=\"0 0 24 24\"\r\n      width=\"24\"\r\n      height=\"24\"\r\n      className={className}\r\n      {...rest}\r\n    >\r\n      <title>{progress * 100}%</title>\r\n      <g fill=\"none\" fillRule=\"evenodd\" strokeWidth=\"6\">\r\n        <Bg cx=\"12\" cy=\"12\" r=\"9\" />\r\n        <Value\r\n          cx=\"12\"\r\n          cy=\"12\"\r\n          r=\"9\"\r\n          transform=\"rotate(-90 12 12)\"\r\n          dash={dash}\r\n          dashoffset={dashoffset}\r\n          progress={progress}\r\n          warningThreshold={warningThreshold}\r\n        />\r\n      </g>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nDonut.themeProps = {\r\n  donut: {\r\n    name: \"donut\",\r\n    description: \"Wrapper style for donut\",\r\n    type: themePropTypes.style\r\n  },\r\n  donutBackground: {\r\n    name: \"donut_bg\",\r\n    description: \"Circle style for donut background\",\r\n    type: themePropTypes.style\r\n  },\r\n  donutValue: {\r\n    name: \"donut_value\",\r\n    description: \"Value style for donut\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst Wrapper = styled.svg`\r\n  transform: rotateY(180deg);\r\n  ${applyVariants(Donut.themeProps.donut.name)};\r\n`\r\n\r\nconst Bg = styled.circle`\r\n  stroke: ${color.line};\r\n  ${applyVariants(Donut.themeProps.donutBackground.name)};\r\n`\r\n\r\nconst Value = styled.circle`\r\n  stroke: ${p =>\r\n    p.progress >= p.warningThreshold ? color.warning : color.primary};\r\n  stroke-dasharray: ${p => p.dash};\r\n  stroke-dashoffset: ${p => p.dashoffset};\r\n  ${applyVariants(Donut.themeProps.donutValue.name)};\r\n`\r\n\r\nDonut.defaultProps = {\r\n  className: \"\",\r\n  warningThreshold: 0.9\r\n}\r\n\r\nDonut.propTypes = {\r\n  progress: PropTypes.number.isRequired,\r\n  warningThreshold: PropTypes.number,\r\n  className: PropTypes.string\r\n}\r\n\r\nexport default Donut\r\n","Fraction":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled, { css } from \"styled-components\"\r\nimport hideVisually from \"../../../theming/styles/hideVisually\"\r\nimport { themePropTypes } from \"../../../constants/themeContants\"\r\nimport { applyVariants, color, spacing } from \"../../../theming\"\r\n\r\nconst Fraction = ({\r\n  value,\r\n  max,\r\n  maxComponent,\r\n  valueComponent,\r\n  className,\r\n  onClick,\r\n  ...rest\r\n}) => {\r\n  const fractionArray = [...Array(max)].map((e, index) => index < value)\r\n  const unfilled = maxComponent || <DesaturatedDot />\r\n  const filled = valueComponent || <ColoredDot />\r\n\r\n  const addKey = (compo, index, handleClick) =>\r\n    React.cloneElement(compo, {\r\n      key: `dot-${index}`,\r\n      onClick: handleClick || null\r\n    })\r\n\r\n  return (\r\n    <FractionWrapper className={className} {...rest}>\r\n      {fractionArray.map((dot, index) =>\r\n        dot\r\n          ? addKey(filled, index, () => (onClick ? onClick(index) : null))\r\n          : addKey(unfilled, index, () => (onClick ? onClick(index) : null))\r\n      )}\r\n      <Hide>\r\n        {value} / {max}\r\n      </Hide>\r\n    </FractionWrapper>\r\n  )\r\n}\r\n\r\nconst Hide = styled.span`\r\n  ${hideVisually};\r\n`\r\n\r\nFraction.themeProps = {\r\n  wrapper: {\r\n    name: \"fraction\",\r\n    description: \"Wrapper style\",\r\n    type: themePropTypes.style\r\n  },\r\n  circle: {\r\n    name: \"fraction_circle\",\r\n    description: \"Circle style\",\r\n    type: themePropTypes.style\r\n  },\r\n  coloredDot: {\r\n    name: \"fraction_colored_dot\",\r\n    description: \"Colored dot style\",\r\n    type: themePropTypes.style\r\n  },\r\n  desaturatedDot: {\r\n    name: \"fraction_desaturated_dot\",\r\n    description: \"Desaturated dot style\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst circle = css`\r\n  width: 12px;\r\n  height: 12px;\r\n  border-radius: 50%;\r\n  ${applyVariants(Fraction.themeProps.circle.name)};\r\n`\r\n\r\nconst ColoredDot = styled.div`\r\n  ${circle};\r\n  background-color: ${color.primary};\r\n  ${applyVariants(Fraction.themeProps.coloredDot.name)};\r\n`\r\n\r\nconst DesaturatedDot = styled.div`\r\n  ${circle};\r\n  background-color: ${color.line};\r\n  ${applyVariants(Fraction.themeProps.desaturatedDot.name)};\r\n`\r\n\r\nconst FractionWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  > * {\r\n    margin-right: ${spacing.tiny};\r\n  }\r\n  ${applyVariants(Fraction.themeProps.wrapper.name)};\r\n`\r\n\r\nFraction.defaultProps = {\r\n  max: 5,\r\n  value: 5,\r\n  maxComponent: null,\r\n  valueComponent: null,\r\n  className: \"\",\r\n  onClick: null\r\n}\r\n\r\nFraction.propTypes = {\r\n  /**\r\n   * Value\r\n   */\r\n  value: PropTypes.number.isRequired,\r\n  /**\r\n   * Max\r\n   */\r\n  max: PropTypes.number.isRequired,\r\n  maxComponent: PropTypes.element,\r\n  valueComponent: PropTypes.element,\r\n  className: PropTypes.string,\r\n  onClick: PropTypes.func\r\n}\r\n\r\nexport default Fraction\r\n","Keyfigures":"import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport PropTypes from \"prop-types\"\r\nimport { formatCurrency } from \"@staccx/formatting\"\r\nimport { themePropTypes } from \"../../../constants/themeContants\"\r\nimport { applyVariants, spacing, color, font } from \"../../../theming\"\r\n\r\nconst KeyFigures = ({ figures }) => (\r\n  <List>\r\n    {figures.map(figure => (\r\n      <ListItem key={figure.key}>\r\n        <Heading>{figure.label}</Heading>\r\n        <Value>{formatCurrency(figure.amount)}</Value>\r\n      </ListItem>\r\n    ))}\r\n  </List>\r\n)\r\n\r\nKeyFigures.themeProps = {\r\n  list: {\r\n    name: \"KEYFIGURES\",\r\n    description: \"list style\",\r\n    type: themePropTypes.style\r\n  },\r\n  item: {\r\n    name: \"KEYFIGURES_ITEM\",\r\n    description: \"item style\",\r\n    type: themePropTypes.style\r\n  },\r\n  heading: {\r\n    name: \"KEYFIGURES_HEADING\",\r\n    description: \"heading style\",\r\n    type: themePropTypes.style\r\n  },\r\n  value: {\r\n    name: \"KEYFIGURES_VALUE\",\r\n    description: \"value style\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst List = styled.ul`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  margin-bottom: 0;\r\n  color: currentColor;\r\n  padding: 0;\r\n  ${applyVariants(KeyFigures.themeProps.list.name)};\r\n`\r\n\r\nconst ListItem = styled.li`\r\n  position: relative;\r\n  display: flex;\r\n  padding: ${spacing.tiny} ${spacing.medium};\r\n  flex-direction: column;\r\n  text-align: center;\r\n\r\n  &:not(:first-child)::after {\r\n    content: \"\";\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    height: 100%;\r\n    width: 1px;\r\n    background-color: ${color.line};\r\n  }\r\n  ${applyVariants(KeyFigures.themeProps.item.name)};\r\n`\r\n\r\nconst Heading = styled.h3`\r\n  padding-bottom: ${spacing.tiny};\r\n  ${applyVariants(KeyFigures.themeProps.heading.name)};\r\n`\r\n\r\nconst Value = styled.span`\r\n  font-size: ${font.h2};\r\n  color: ${color.blue};\r\n  ${applyVariants(KeyFigures.themeProps.value.name)};\r\n`\r\n\r\nKeyFigures.propTypes = {\r\n  figures: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      value: PropTypes.string,\r\n      heading: PropTypes.string\r\n    })\r\n  ).isRequired\r\n}\r\n\r\nexport default KeyFigures\r\n","Loading":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled, { keyframes } from \"styled-components\"\r\nimport { themePropTypes } from \"../../../constants/themeContants\"\r\nimport ThemeComponent from \"../../Theme/ThemeComponent\"\r\nimport { applyVariants, color, spacing } from \"../../../theming\"\r\nimport useTimer from \"../../../hooks/useTimer\"\r\n\r\nconst DefaultLoading = ({ className, variant, ...rest }) => (\r\n  <SignalSpinner className={className} variant={variant} {...rest} />\r\n)\r\n\r\nexport const COMPONENT_LOADING = \"COMPONENT_LOADING\"\r\n\r\nconst themeProps = {\r\n  component: {\r\n    name: \"COMPONENT_LOADING\",\r\n    description: \"Component for loading\",\r\n    type: themePropTypes.component\r\n  },\r\n  loading: {\r\n    name: \"LOADING\",\r\n    description: \"Loading style\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst Loading = ({ className, idleTime, ...rest }) => {\r\n  const isReady = useTimer(idleTime)\r\n\r\n  // Wait before rendering\r\n  if (!isReady) {\r\n    return null\r\n  }\r\n  return (\r\n    <ThemeComponent\r\n      tagName={themeProps.component.name}\r\n      fallback={DefaultLoading}\r\n      {...rest}\r\n    />\r\n  )\r\n}\r\n\r\nconst spinnerBubble1 = keyframes`\r\n  0% {\r\n    color: ${color.primary};\r\n    transform: translate(-50%, -50%) scale(1);\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    color:  ${color.secondary};\r\n    transform: translate(-50%, -50%) scale(4.8);\r\n    opacity: 0;\r\n  }\r\n`\r\n\r\nconst spinnerBubble2 = keyframes`\r\n  0% {\r\n    color: ${color.secondary};\r\n    transform: translate(-50%, -50%) scale(1);\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    color: ${color.primary};\r\n    transform: translate(-50%, -50%) scale(4.8);\r\n    opacity: 0;\r\n  }\r\n`\r\n\r\nconst SignalSpinner = styled.div`\r\n  position: relative;\r\n  display: block;\r\n  width: ${spacing.large};\r\n  height: ${spacing.large};\r\n  color: ${color.primary};\r\n\r\n  &::before,\r\n  &::after {\r\n    content: \"\";\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    width: 10px;\r\n    height: 10px;\r\n    opacity: 0;\r\n    box-shadow: 0 0 0 1px;\r\n    border-radius: 50%;\r\n    transform: translate(-50%, -50%) scale(1);\r\n    transform-origin: center;\r\n  }\r\n\r\n  &::before {\r\n    animation: ${spinnerBubble1} 2.6s ease-out 1.3s infinite;\r\n  }\r\n\r\n  &::after {\r\n    animation: ${spinnerBubble2} 2.6s ease-out 0s infinite;\r\n  }\r\n  ${applyVariants(themeProps.loading.name)};\r\n`\r\n\r\nLoading.propTypes = { className: PropTypes.string, variant: PropTypes.string }\r\nLoading.themeProps = themeProps\r\n\r\nexport default Loading\r\n","ProgressBar":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport { ScaleInX } from \"@staccx/animations\"\r\nimport { themePropTypes } from \"../../../constants/themeContants\"\r\nimport { applyVariants, color, spacing, font } from \"../../../theming\"\r\n\r\nconst ProgressBar = ({\r\n  progress,\r\n  className,\r\n  warningThreshold,\r\n  ...otherProps\r\n}) => {\r\n  if (progress > 1) {\r\n    console.warn(\"Progress is above max (1). Please enter correct value\")\r\n    progress *= 0.01\r\n  }\r\n  return (\r\n    <Bg className={className} {...otherProps}>\r\n      <Bar width={progress} warningThreshold={warningThreshold}>\r\n        <Progress>\r\n          {progress >= 1 ? \"100\" : Math.round(progress * 100)}%\r\n        </Progress>\r\n      </Bar>\r\n    </Bg>\r\n  )\r\n}\r\n\r\nconst themeProps = {\r\n  background: {\r\n    name: \"progress_bar\",\r\n    description: \"Progress bar background style\",\r\n    type: themePropTypes.style\r\n  },\r\n  bar: {\r\n    name: \"progress_bar_bar\",\r\n    description: \"Progress bar bar style\",\r\n    type: themePropTypes.style\r\n  },\r\n  progress: {\r\n    name: \"progress_bar_progress\",\r\n    description: \"Progress bar progress style\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst Bg = styled.div`\r\n  background: ${color.subtleHover};\r\n  display: block;\r\n  height: ${spacing.medium};\r\n  min-width: 200px;\r\n  border-radius: ${spacing.small};\r\n  position: relative;\r\n  overflow: hidden;\r\n  border: 3px solid ${color.subtleHover};\r\n  -webkit-mask-image: -webkit-radial-gradient(\r\n    white,\r\n    black\r\n  ); /* to remove transition-bug */\r\n\r\n  ${applyVariants(themeProps.background.name)};\r\n`\r\n\r\nconst Bar = styled.div`\r\n  position: absolute;\r\n  background-color: ${p =>\r\n    p.width >= p.warningThreshold ? color.warning : color.primary};\r\n  left: 0;\r\n  height: 100%;\r\n  width: ${p => (p.width > 1 ? \"100\" : p.width * 100)}%;\r\n  border-radius: 0 ${spacing.small} ${spacing.small} 0;\r\n  transform: scaleX(0);\r\n  animation: ${ScaleInX} 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275) 0.3s 1\r\n    forwards;\r\n  transform-origin: left center;\r\n  ${applyVariants(themeProps.bar.name)};\r\n`\r\n\r\nconst Progress = styled.span`\r\n  position: absolute;\r\n  right: ${spacing.small};\r\n  line-height: 18px;\r\n  font-size: ${font.tiny};\r\n  color: ${color.white};\r\n  ${applyVariants(themeProps.progress.name)};\r\n`\r\n\r\nProgressBar.defaultProps = {\r\n  className: \"\",\r\n  warningThreshold: 0.9\r\n}\r\n\r\nProgressBar.propTypes = {\r\n  /**\r\n   * Progress normalized (0-1)\r\n   */\r\n  progress: PropTypes.number.isRequired,\r\n  warningThreshold: PropTypes.number,\r\n  className: PropTypes.string\r\n}\r\n\r\nProgressBar.themeProps = themeProps\r\n\r\nexport default ProgressBar\r\n","Expand":"import React, { Component } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport { BounceIn } from \"@staccx/animations\"\r\nimport Caret from \"../Icons/Caret\"\r\nimport { commonPropTypes, themePropTypes } from \"../../constants/themeContants\"\r\nimport ThemeComponent from \"../Theme/ThemeComponent\"\r\nimport { applyVariants, color, spacing } from \"../../theming\"\r\n\r\nclass Expand extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.handleExpand = this.handleExpand.bind(this)\r\n    this.state = {\r\n      isExpanded: this.props.expanded\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.expanded !== undefined) {\r\n      this.setState({ isExpanded: nextProps.expanded })\r\n    }\r\n  }\r\n\r\n  handleExpand(event) {\r\n    this.setState({\r\n      isExpanded: !this.state.isExpanded\r\n    })\r\n    if (this.props.onClick) {\r\n      this.props.onClick(event)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      children,\r\n      className,\r\n      onClick,\r\n      title,\r\n      hideIcon,\r\n      variant,\r\n      ...restProps\r\n    } = this.props\r\n\r\n    const { isExpanded } = this.state\r\n\r\n    return (\r\n      <ExpandWrapper className={className} variant={variant} {...restProps}>\r\n        {React.Children.map(children, (child, i) => {\r\n          // Ignore the first child\r\n          if (i < 1) {\r\n            return (\r\n              <ExpandBtn\r\n                title={title}\r\n                isExpanded={isExpanded}\r\n                onClick={this.handleExpand}\r\n                aria-expanded={isExpanded}\r\n                aria-controls={title}\r\n                id={title + \"2\"}\r\n                variant={variant}\r\n              >\r\n                {child}\r\n                {!hideIcon && (\r\n                  <ExpandIcon variant={variant} isExpanded={isExpanded} />\r\n                )}\r\n              </ExpandBtn>\r\n            )\r\n          }\r\n          return (\r\n            isExpanded && (\r\n              <ExpandItem\r\n                id={title}\r\n                aria-labelledby={title + \"2\"}\r\n                variant={variant}\r\n              >\r\n                {child}\r\n              </ExpandItem>\r\n            )\r\n          )\r\n        })}\r\n      </ExpandWrapper>\r\n    )\r\n  }\r\n}\r\n\r\nExpand.themeProps = {\r\n  iconComponent: {\r\n    name: \"COMPONENT_EXPAND_ICON\",\r\n    description: \"Icon shown. Defaults to Caret\",\r\n    type: themePropTypes.component\r\n  },\r\n  icon: {\r\n    name: \"EXPAND_ICON\",\r\n    description: \"Icon style\",\r\n    type: themePropTypes.style\r\n  },\r\n  wrapper: {\r\n    name: \"EXPAND_WRAPPER\",\r\n    description: \"Wrapper style\",\r\n    type: themePropTypes.style\r\n  },\r\n  button: {\r\n    name: \"EXPAND_BTN\",\r\n    description: \"Button style\",\r\n    type: themePropTypes.style\r\n  },\r\n  item: {\r\n    name: \"EXPAND_ITEM\",\r\n    description: \"Item style\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst IconComponent = ({ ...props }) => (\r\n  <ThemeComponent\r\n    tagName={Expand.themeProps.iconComponent.name}\r\n    fallback={Caret}\r\n    {...props}\r\n  />\r\n)\r\n\r\nconst ExpandIcon = styled(IconComponent)`\r\n  position: absolute;\r\n  right: ${color.small};\r\n  top: 50%;\r\n  fill: ${color.wcag};\r\n  transition: transform 0.3s ease-out;\r\n  right: 0;\r\n  transform: ${p =>\r\n    p.isExpanded\r\n      ? \"translateY(-50%) rotate(180deg)\"\r\n      : \"translateY(-50%) rotate(0)\"};\r\n  ${applyVariants(Expand.themeProps.icon.name)};\r\n`\r\n\r\nexport const ExpandWrapper = styled.div`\r\n  ${applyVariants(Expand.themeProps.wrapper.name)};\r\n`\r\n\r\nexport const ExpandBtn = styled.button`\r\n  position: relative;\r\n  background-color: transparent;\r\n  border-width: 0;\r\n  color: inherit;\r\n  padding: 0;\r\n  text-align: left;\r\n  padding-right: ${spacing.mediumPlus};\r\n  margin: 0;\r\n  min-height: 0;\r\n  width: 100%;\r\n\r\n  &:hover,\r\n  &:focus,\r\n  &:active {\r\n    background-color: transparent;\r\n    border-width: 0;\r\n    color: inherit;\r\n    outline: none;\r\n\r\n    ${ExpandIcon} {\r\n      fill: ${color.primary};\r\n    }\r\n  }\r\n\r\n  ${applyVariants(Expand.themeProps.button.name)};\r\n`\r\n\r\nexport const ExpandItem = styled.div`\r\n  opacity: 0;\r\n  animation: 0.4s ${BounceIn} 0.05s ease-out forwards 1;\r\n  ${applyVariants(Expand.themeProps.item.name)};\r\n`\r\n\r\nExpand.defaultProps = {\r\n  expanded: false,\r\n  className: \"\",\r\n  title: \"\",\r\n  hideIcon: false\r\n}\r\n\r\nExpand.propTypes = {\r\n  children: commonPropTypes.children.isRequired,\r\n  title: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.element,\r\n    PropTypes.array\r\n  ]),\r\n  className: PropTypes.string,\r\n  expanded: PropTypes.bool,\r\n  hideIcon: PropTypes.bool\r\n}\r\n\r\nexport default Expand\r\n","Odometer":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport hideVisually from \"../../../theming/styles/hideVisually\"\r\nimport Digit from \"./Digit\"\r\nimport { themePropTypes } from \"../../../constants/themeContants\"\r\nimport { applyVariants } from \"../../../theming\"\r\n\r\nclass Odometer extends React.PureComponent {\r\n  constructor(...props) {\r\n    super(...props)\r\n\r\n    this.state = {\r\n      isAnimating: false\r\n    }\r\n\r\n    this.timeout = null\r\n\r\n    this.animate = this.animate.bind(this)\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.animate()\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (this.props.number !== nextProps.number) {\r\n      this.animate()\r\n    }\r\n  }\r\n\r\n  animate() {\r\n    this.setState({ isAnimating: true })\r\n    clearTimeout(this.timeout)\r\n    this.timeout = setTimeout(() => {\r\n      this.setState({ isAnimating: false })\r\n    }, this.props.speed + 10)\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      number,\r\n      speed,\r\n      size,\r\n      separatorSteps,\r\n      variant,\r\n      ...restProps\r\n    } = this.props\r\n    const { isAnimating } = this.state\r\n    const chars = parseInt(number, 10)\r\n      .toString()\r\n      .replace(\"-\", \"\")\r\n      .split(\"\")\r\n    const digitLength = chars.length\r\n    const numSeparators = digitLength / separatorSteps\r\n    for (let i = 0; i < numSeparators; i++) {\r\n      // TODO: There HAS to be a smarter way of doing this. Brain is not working atm\r\n      chars.splice(digitLength - separatorSteps * i, 0, \"\")\r\n    }\r\n\r\n    const renderDigits = (digit, single, speed) =>\r\n      chars.map((digit, i) => (\r\n        <OdometerContainer key={`digit-${i}`} variant={variant}>\r\n          <Digit\r\n            size={size}\r\n            digit={digit}\r\n            single={single}\r\n            speed={speed}\r\n            variant={variant}\r\n          />\r\n        </OdometerContainer>\r\n      ))\r\n    return (\r\n      <OdometerWrapper size={size} variant={variant} {...restProps}>\r\n        <OdometerStatic isAnimating={isAnimating} variant={variant}>\r\n          {renderDigits(number, true, speed)}\r\n        </OdometerStatic>\r\n        <OdometerAnimating isAnimating={isAnimating} variant={variant}>\r\n          {renderDigits(number, false, speed)}\r\n        </OdometerAnimating>\r\n      </OdometerWrapper>\r\n    )\r\n  }\r\n}\r\n\r\nOdometer.themeProps = {\r\n  animating: {\r\n    name: \"odometer_animating\",\r\n    description: \"Style for the animating odometer\",\r\n    type: themePropTypes.style\r\n  },\r\n  static: {\r\n    name: \"odometer_static\",\r\n    description: \"Style for the static odometer\",\r\n    type: themePropTypes.style\r\n  },\r\n  container: {\r\n    name: \"odometer_container\",\r\n    description: \"Style for the container\",\r\n    type: themePropTypes.style\r\n  },\r\n  wrapper: {\r\n    name: \"odometer_wrapper\",\r\n    description: \"Style for the wrapper\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst OdometerAnimating = styled.div`\r\n  ${p => (!p.isAnimating ? hideVisually : \"display: flex;\")};\r\n  ${applyVariants(Odometer.themeProps.animating)};\r\n`\r\n\r\nconst OdometerStatic = styled.div`\r\n  ${p => (p.isAnimating ? hideVisually : \"display: flex;\")};\r\n  ${applyVariants(Odometer.themeProps.static)};\r\n`\r\n\r\nconst OdometerContainer = styled.div`\r\n  position: relative;\r\n  ${applyVariants(Odometer.themeProps.container)};\r\n`\r\n\r\nconst OdometerWrapper = styled.div`\r\n  font-size: ${p => p.size}px;\r\n  line-height: 1;\r\n  display: inline-block;\r\n  ${applyVariants(Odometer.themeProps.wrapper)};\r\n`\r\n\r\n// TODO: Add support for strings?\r\nOdometer.propTypes = {\r\n  /**\r\n   * Value to tween to\r\n   */\r\n  number: PropTypes.number.isRequired,\r\n  separatorSteps: PropTypes.number,\r\n  speed: PropTypes.number,\r\n  size: PropTypes.number.isRequired\r\n}\r\n\r\nOdometer.defaultProps = {\r\n  number: 0,\r\n  separatorSteps: 3,\r\n  size: 32,\r\n  speed: 500\r\n}\r\n\r\nexport default Odometer\r\n","CheckBox":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport Check from \"../../Icons/Check\"\r\nimport {\r\n  color,\r\n  font,\r\n  spacing,\r\n  fontFamily,\r\n  fontWeight,\r\n  applyVariants,\r\n  targetSize,\r\n  borderRadius\r\n} from \"../../../theming\"\r\nimport {\r\n  commonPropTypes,\r\n  themePropTypes\r\n} from \"../../../constants/themeContants\"\r\nimport ThemeComponent from \"../../Theme/ThemeComponent\"\r\n\r\nconst CheckBox = ({\r\n  children,\r\n  id,\r\n  group,\r\n  disabled,\r\n  onChange,\r\n  className,\r\n  defaultChecked,\r\n  checkIcon,\r\n  ignoreBase,\r\n  variant,\r\n  ...otherProps\r\n}) => {\r\n  return (\r\n    <CheckWrapper variant={variant}>\r\n      <InputCheck\r\n        className={className}\r\n        id={id}\r\n        disabled={disabled}\r\n        type=\"checkbox\"\r\n        name={group}\r\n        onChange={onChange}\r\n        defaultChecked={defaultChecked}\r\n        variant={variant}\r\n        {...otherProps}\r\n      />\r\n\r\n      <Label htmlFor={id} variant={variant}>\r\n        <Icon variant={variant} />\r\n        {children}\r\n      </Label>\r\n    </CheckWrapper>\r\n  )\r\n}\r\n\r\nCheckBox.themeProps = {\r\n  wrapper: {\r\n    name: \"checkbox\",\r\n    description: \"Checkbox style\",\r\n    type: themePropTypes.style\r\n  },\r\n  icon: {\r\n    name: \"checkbox_checked_icon\",\r\n    description: \"Icon style\",\r\n    type: themePropTypes.style\r\n  },\r\n  iconComponent: {\r\n    name: \"COMPONENT_CHECKBOX_ICON\",\r\n    description: \"Icon component\",\r\n    type: themePropTypes.component\r\n  },\r\n  label: {\r\n    name: \"checkbox_label\",\r\n    description: \"Label style\",\r\n    type: themePropTypes.style\r\n  },\r\n  labelBefore: {\r\n    name: \"CHECKBOX_LABEL_BEFORE\",\r\n    description: \"Label before style\",\r\n    type: themePropTypes.style\r\n  },\r\n  labelChecked: {\r\n    name: \"CHECKBOX_LABEL_CHECKED\",\r\n    description: \"Label checked style\",\r\n    type: themePropTypes.style\r\n  },\r\n  labelBeforeChecked: {\r\n    name: \"CHECKBOX_LABEL_BEFORE_CHECKED\",\r\n    description: \"Label before checked style\",\r\n    type: themePropTypes.style\r\n  },\r\n  input: {\r\n    name: \"checkbox_input\",\r\n    description: \"Inputstyle\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst CheckWrapper = styled.div`\r\n  ${applyVariants(CheckBox.themeProps.wrapper)};\r\n`\r\n\r\nconst IconComponent = ({ ...props }) => (\r\n  <ThemeComponent\r\n    tagName={CheckBox.themeProps.iconComponent}\r\n    fallback={Check}\r\n    {...props}\r\n  />\r\n)\r\n\r\nexport const Icon = styled(IconComponent)`\r\n  position: absolute;\r\n  left: 3px;\r\n  top: 15px;\r\n  display: block;\r\n  height: 18px;\r\n  width: 18px;\r\n  transform: scale(0);\r\n  transition: all 0.2s ease-in-out;\r\n  color: ${color.primary};\r\n  ${applyVariants(CheckBox.themeProps.icon)};\r\n`\r\n\r\nconst InputCheck = styled.input`\r\n  position: absolute;\r\n  clip: rect(0, 0, 0, 0);\r\n  clip: rect(0 0 0 0);\r\n\r\n  &:checked ~ label {\r\n    > svg {\r\n      transform: scale(1);\r\n    }\r\n    ${applyVariants(CheckBox.themeProps.labelChecked)};\r\n  }\r\n\r\n  &:checked ~ label::before {\r\n    ${applyVariants(CheckBox.themeProps.labelBeforeChecked)};\r\n  }\r\n\r\n  &:focus ~ label {\r\n    &::before {\r\n      border-color: ${color.primary};\r\n    }\r\n  }\r\n\r\n  ${applyVariants(CheckBox.themeProps.input)};\r\n`\r\n\r\nconst Label = styled.label`\r\n  padding: 0 0 0 ${spacing.mediumPlus};\r\n  position: relative;\r\n  font-weight: ${fontWeight.normal};\r\n  letter-spacing: normal;\r\n  width: auto;\r\n  cursor: pointer;\r\n  font-family: ${fontFamily.body};\r\n  font-size: ${font.base};\r\n  line-height: 1.6;\r\n  display: inline-block;\r\n  min-height: ${targetSize.normal};\r\n  padding-top: ${spacing.small};\r\n  padding-bottom: ${spacing.small};\r\n\r\n  &::before {\r\n    content: \"\";\r\n    background: ${color.white};\r\n    border: 1px solid ${color.line};\r\n    border-radius: ${borderRadius};\r\n    display: block;\r\n    height: ${spacing.medium};\r\n    left: 0;\r\n    position: absolute;\r\n    top: ${spacing.small};\r\n    width: ${spacing.medium};\r\n    ${applyVariants(CheckBox.themeProps.labelBefore)};\r\n  }\r\n\r\n  &:hover,\r\n  &:focus {\r\n    &::before {\r\n      border-color: ${color.primary};\r\n    }\r\n  }\r\n  ${applyVariants(CheckBox.themeProps.label)};\r\n`\r\n\r\nCheckBox.propTypes = {\r\n  children: commonPropTypes.children.isRequired,\r\n  disabled: PropTypes.bool,\r\n  group: PropTypes.string,\r\n  id: PropTypes.string.isRequired,\r\n  input: PropTypes.any,\r\n  onChange: PropTypes.func,\r\n  className: PropTypes.string,\r\n  defaultChecked: PropTypes.bool,\r\n  checkIcon: PropTypes.element,\r\n  ignoreBase: PropTypes.func\r\n}\r\n\r\nCheckBox.defaultProps = {\r\n  disabled: false,\r\n  input: {},\r\n  onChange: null,\r\n  className: \"\",\r\n  defaultChecked: false,\r\n  checkIcon: null\r\n}\r\n\r\nexport default CheckBox\r\n","CheckGroup":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nconst CheckGroup = ({ children, group, onChange }) => {\r\n  const handleChange = event => {\r\n    const value = event.target.value\r\n    if (onChange) {\r\n      onChange(value)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {children.map(child =>\r\n        React.cloneElement(child, {\r\n          ...child.props,\r\n          onChange: handleChange,\r\n          group\r\n        })\r\n      )}\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nCheckGroup.propTypes = {\r\n  children: PropTypes.arrayOf(PropTypes.element).isRequired,\r\n  group: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CheckGroup\r\n","Combobox":"import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport PropTypes from \"prop-types\"\r\nimport Search from \"../../../hoc/Search/Search\"\r\nimport { commonPropTypes } from \"../../../constants/themeContants\"\r\nimport Downshift from \"downshift\"\r\nimport { applyVariants } from \"../../../theming\"\r\nimport Wrapper from \"../../Layout/Wrapper/Wrapper\"\r\n\r\nconst Combobox = ({\r\n  options,\r\n  onChange,\r\n  children,\r\n  renderInput,\r\n  renderLabel,\r\n  renderSelected,\r\n  filter,\r\n  indexer,\r\n  downshiftProps,\r\n  variant\r\n}) => {\r\n  const indices = Array.isArray(filter) ? filter : [filter]\r\n  return (\r\n    <Search documents={options} indices={indices} indexer={indexer}>\r\n      {({ result, search }) => (\r\n        <Downshift\r\n          onChange={selection => onChange(selection)}\r\n          itemToString={item => (item ? item.value : \"\")}\r\n          onInputValueChange={e => search(e)}\r\n          {...downshiftProps}\r\n        >\r\n          {({\r\n            getInputProps,\r\n            getItemProps,\r\n            getLabelProps,\r\n            getRootProps,\r\n            isOpen,\r\n            inputValue,\r\n            highlightedIndex,\r\n            selectedItem,\r\n            selectItem,\r\n            clearSelection,\r\n            openMenu,\r\n            closeMenu,\r\n            ...rest\r\n          }) => {\r\n            return (\r\n              <ComboWrapper\r\n                variant={variant}\r\n                {...getRootProps({ refKey: \"innerRef\" })}\r\n              >\r\n                {renderLabel && renderLabel(getLabelProps)}\r\n                {!selectedItem && renderInput(getInputProps)}\r\n                {selectedItem &&\r\n                  renderSelected(selectedItem, getInputProps, {\r\n                    clearSelection,\r\n                    openMenu,\r\n                    closeMenu,\r\n                    variant\r\n                  })}\r\n                {isOpen\r\n                  ? children({\r\n                      result,\r\n                      getItemProps,\r\n                      highlightedIndex,\r\n                      selectedItem,\r\n                      selectItem,\r\n                      variant\r\n                    })\r\n                  : null}\r\n              </ComboWrapper>\r\n            )\r\n          }}\r\n        </Downshift>\r\n      )}\r\n    </Search>\r\n  )\r\n}\r\n\r\nconst ComboWrapper = ({ innerRef, children, variant }) => (\r\n  <Wrap variant={variant} ref={innerRef}>\r\n    {children}\r\n  </Wrap>\r\n)\r\n\r\nconst Wrap = styled.div`\r\n  position: relative;\r\n  ${applyVariants(Wrapper.themeProps.wrapper)}\r\n`\r\n\r\nCombobox.propTypes = {\r\n  onChange: PropTypes.func,\r\n  children: PropTypes.func,\r\n  renderLabel: PropTypes.func,\r\n  renderInput: PropTypes.func,\r\n  renderSelected: PropTypes.func,\r\n  renderGroupHeader: PropTypes.func,\r\n  listComponent: commonPropTypes.children,\r\n  filter: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\r\n  groupBy: PropTypes.string,\r\n  options: PropTypes.array,\r\n  downshiftProps: PropTypes.object\r\n}\r\n\r\nexport default Combobox\r\n","Form":"import React, { Component } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Formik } from \"formik\"\r\nimport Button from \"../../Button/Button\"\r\nimport { commonPropTypes } from \"../../../constants/themeContants\"\r\nimport traverse from \"react-traverse\"\r\nconst Yup = require(\"yup\")\r\n\r\nconst findFormFields = (node, startFields = []) => {\r\n  const formFields = startFields\r\n  const isFormField = name => name === \"FormField\"\r\n\r\n  traverse(node, {\r\n    ComponentElement(path) {\r\n      if (isFormField(path.node.type.name)) {\r\n        formFields.push(path.node)\r\n      }\r\n      path.traverseChildren()\r\n    }\r\n  })\r\n\r\n  return formFields\r\n}\r\n\r\nclass Form extends Component {\r\n  render() {\r\n    const formFields = findFormFields(this.props.children)\r\n    const validationShape = formFields.reduce((validator, curr) => {\r\n      const { type, required, nullable, name, min, max, integer } = curr.props\r\n\r\n      switch (type) {\r\n        case \"string\": {\r\n          validator[name] = Yup.string()\r\n          break\r\n        }\r\n        case \"number\": {\r\n          validator[name] = Yup.number()\r\n          if (min) {\r\n            validator[name] = validator[name].min(min)\r\n          }\r\n          if (max) {\r\n            validator[name] = validator[name].max(max)\r\n          }\r\n          if (integer) {\r\n            validator[name] = validator[name].integer()\r\n          }\r\n          break\r\n        }\r\n        case \"bool\": {\r\n          validator[name] = Yup.bool()\r\n          break\r\n        }\r\n        case \"email\": {\r\n          validator[name] = Yup.string().email()\r\n          break\r\n        }\r\n        case \"date\": {\r\n          validator[name] = Yup.date()\r\n          break\r\n        }\r\n        case \"url\": {\r\n          validator[name] = Yup.string().url()\r\n          break\r\n        }\r\n        default: {\r\n          validator[name] = Yup.string()\r\n          break\r\n        }\r\n      }\r\n      if (nullable) {\r\n        validator[name] = validator[name].nullable()\r\n      }\r\n      if (required) {\r\n        validator[name] = validator[name].required(\"Denne må du ha\")\r\n      }\r\n      return validator\r\n    }, {})\r\n    const validationSchema = Yup.object().shape(validationShape)\r\n    const { Container } = this.props\r\n    return (\r\n      <Formik\r\n        initialValues={this.props.initialValues}\r\n        validationSchema={validationSchema}\r\n        onSubmit={this.props.onSubmit}\r\n        render={({ handleSubmit, values, isValid, errors, touched }) => {\r\n          return (\r\n            <form onSubmit={handleSubmit}>\r\n              {Container && (\r\n                <Container {...this.props.containerProps}>\r\n                  {this.props.children}\r\n                  {this.props.renderButton ? (\r\n                    this.props.renderButton({\r\n                      values,\r\n                      isValid,\r\n                      errors,\r\n                      touched\r\n                    })\r\n                  ) : (\r\n                    <Button type=\"submit\" onClick={() => null}>\r\n                      {this.props.buttonText}\r\n                    </Button>\r\n                  )}\r\n                </Container>\r\n              )}\r\n              {!Container && (\r\n                <React.Fragment>\r\n                  {this.props.children}\r\n                  {this.props.renderButton ? (\r\n                    this.props.renderButton({ values, isValid, errors })\r\n                  ) : (\r\n                    <Button type=\"submit\" onClick={() => null}>\r\n                      {this.props.buttonText}\r\n                    </Button>\r\n                  )}\r\n                </React.Fragment>\r\n              )}\r\n            </form>\r\n          )\r\n        }}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nForm.propTypes = {\r\n  children: commonPropTypes.children.isRequired,\r\n  initialValues: PropTypes.object,\r\n  onSubmit: PropTypes.func,\r\n  renderButton: PropTypes.func\r\n}\r\n\r\nForm.defaultProps = {\r\n  initialValues: {},\r\n  onSubmit: console.log,\r\n  containerProps: {}\r\n}\r\n\r\nexport default Form\r\n","AccountInput":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Input, { InputPropTypes } from \"../Input\"\r\nimport { accountMasks } from \"../masks\"\r\n\r\nconst AccountInput = React.forwardRef(\r\n  ({ mask, locale = \"nb\", ...otherProps }, ref) => (\r\n    <Input\r\n      type={\"tel\"}\r\n      ref={ref}\r\n      options={accountMasks[locale]}\r\n      {...otherProps}\r\n    />\r\n  )\r\n)\r\n\r\nAccountInput.propTypes = {\r\n  ...InputPropTypes,\r\n  locale: PropTypes.oneOf([\"nb\"]),\r\n  onChange: PropTypes.func,\r\n  id: PropTypes.string.isRequired,\r\n  guide: PropTypes.bool\r\n}\r\n\r\nAccountInput.defaultProps = {\r\n  locale: \"nb\",\r\n  guide: false\r\n}\r\n\r\nexport default AccountInput\r\n","CompanyInput":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled, { keyframes } from \"styled-components\"\r\nimport debounce from \"lodash.debounce\"\r\nimport Combobox from \"../../Combobox/Combobox\"\r\nimport Flag from \"../../../Layout/Flag/Flag\"\r\nimport Label from \"../../Label/Label\"\r\nimport { color, font, spacing, applyVariants } from \"../../../../theming\"\r\nimport { themePropTypes } from \"../../../../constants/themeContants\"\r\nimport Input from \"../Input\"\r\n\r\nconst defaultMapItem = item => {\r\n  if (!item) {\r\n    return null\r\n  }\r\n  return {\r\n    name: item.navn,\r\n    orgNo: item.organisasjonsnummer,\r\n    orgType: item.orgform.kode\r\n  }\r\n}\r\n\r\nclass CompanyInput extends React.PureComponent {\r\n  constructor(...args) {\r\n    super(...args)\r\n\r\n    this.timeout = null\r\n    this.scheduleSearch = this.scheduleSearch.bind(this)\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleSelect = this.handleSelect.bind(this)\r\n\r\n    const search = debounce(this.scheduleSearch, 200)\r\n    this.state = {\r\n      autoComplete: [],\r\n      searchText: \"\",\r\n      selected: null,\r\n      isLoading: false,\r\n      search\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    if (this.props.selected) {\r\n      this.setState({ selected: this.props.selected })\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this.timeout)\r\n    this.timeout = null\r\n  }\r\n\r\n  scheduleSearch(companyName) {\r\n    this.setState({ searchText: companyName })\r\n    if (!companyName || companyName.length < 2) {\r\n      this.setState({ autoComplete: [], isLoading: false })\r\n      return\r\n    }\r\n\r\n    this.setState({ isLoading: true })\r\n    const filter = `startswith(navn,'${companyName}')`\r\n\r\n    const search = this.props.onSearch\r\n      ? this.props.onSearch\r\n      : () =>\r\n          window\r\n            .fetch(\r\n              `https://data.brreg.no/enhetsregisteret/enhet.json?page=${0}&size=${5}&$filter=${filter}`\r\n            )\r\n            .then(result => result.json())\r\n            .then(json => json.data)\r\n\r\n    search(companyName)\r\n      .then(companies => {\r\n        this.setState({\r\n          autoComplete: companies,\r\n          isLoading: false\r\n        })\r\n      })\r\n      .catch(() => this.setState({ autoComplete: [], isLoading: false }))\r\n  }\r\n\r\n  handleChange(value) {\r\n    if (this.props.onChange) {\r\n      this.props.onChange(value)\r\n    }\r\n    this.state.search(value)\r\n  }\r\n\r\n  handleSelect(selected) {\r\n    this.setState({ selected }, () => {\r\n      if (this.props.onSelect) {\r\n        this.props.onSelect(selected)\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { onChange, mapItem, inputProps, label, ...otherProps } = this.props\r\n\r\n    const { autoComplete, isLoading } = this.state\r\n\r\n    const renderSelected = (selectedItem, getItemProps, { clearSelection }) => {\r\n      const sel = mapItem(selectedItem)\r\n      return (\r\n        <React.Fragment>\r\n          <SelectLabel htmlFor=\"SelectedName\">{label}</SelectLabel>\r\n          <ModifiedFlag\r\n            reverse\r\n            img={\r\n              <Close type=\"button\" onClick={clearSelection}>\r\n                <svg viewBox=\"0 0 26 26\" width=\"26\" height=\"26\">\r\n                  <path\r\n                    fill=\"currentColor\"\r\n                    d=\"M21.7344 19.6406l-2.0977 2.0938c-.3828.3867-1.0078.3867-1.3945 0L13 16.496l-5.2383 5.2383c-.3867.3867-1.0156.3867-1.3984 0l-2.0977-2.0938a.9878.9878 0 0 1 0-1.3984L9.504 13 4.2656 7.7617c-.3828-.3906-.3828-1.0195 0-1.3984l2.0977-2.0977c.3828-.3867 1.0117-.3867 1.3984 0L13 9.5078l5.2422-5.2422c.3867-.3867 1.0156-.3867 1.3945 0l2.0977 2.0938c.3867.3867.3867 1.0156.0039 1.4023L16.496 13l5.2383 5.2422a.9878.9878 0 0 1 0 1.3984z\"\r\n                  />\r\n                </svg>\r\n              </Close>\r\n            }\r\n          >\r\n            <div id=\"SelectedName\">{sel.name}</div>\r\n            <OrgNo>{sel.orgNo}</OrgNo>\r\n          </ModifiedFlag>\r\n        </React.Fragment>\r\n      )\r\n    }\r\n    const renderInput = getInputProps => (\r\n      <React.Fragment>\r\n        <Input\r\n          label={label}\r\n          {...inputProps}\r\n          {...getInputProps({ ...otherProps })}\r\n        />\r\n        {isLoading && (\r\n          <SelectWrapper>\r\n            <SelectLoad />\r\n          </SelectWrapper>\r\n        )}\r\n      </React.Fragment>\r\n    )\r\n    return (\r\n      <Combobox\r\n        onChange={this.handleSelect}\r\n        renderInput={renderInput}\r\n        renderSelected={renderSelected}\r\n        renderLabel={() => null}\r\n        filter={\"name\"}\r\n        indexer={\"orgNo\"}\r\n        options={autoComplete || []}\r\n        downshiftProps={{\r\n          defaultIsOpen: true,\r\n          onInputValueChange: this.handleChange\r\n        }}\r\n      >\r\n        {({ result, getItemProps, selectedItem, highlightedIndex }) => (\r\n          <SelectWrapper>\r\n            <SelectList>\r\n              {result.map((item, index) => {\r\n                const mappedItem = mapItem(item)\r\n                return (\r\n                  <SelectItem\r\n                    {...getItemProps({ item })}\r\n                    key={mappedItem.orgNo}\r\n                    isSelected={highlightedIndex === index}\r\n                  >\r\n                    {`${mappedItem.name}${\r\n                      mappedItem.orgType !== \"AS\"\r\n                        ? \" - \" + mappedItem.orgType\r\n                        : \"\"\r\n                    }`}\r\n                    <OrgNo>{mappedItem.orgNo}</OrgNo>\r\n                  </SelectItem>\r\n                )\r\n              })}\r\n            </SelectList>\r\n          </SelectWrapper>\r\n        )}\r\n      </Combobox>\r\n    )\r\n  }\r\n}\r\n\r\nCompanyInput.themeProps = {\r\n  animateLoadFrom: {\r\n    name: \"COMPANY_INPUT_LOAD_FROM\",\r\n    description: \"animation load from\",\r\n    type: themePropTypes.style\r\n  },\r\n  animateLoadTo: {\r\n    name: \"COMPANY_INPUT_LOAD_FROM\",\r\n    description: \"animation load from\",\r\n    type: themePropTypes.style\r\n  },\r\n  selectLabel: {\r\n    name: \"COMPANY_INPUT_LABEL\",\r\n    description: \"Input label\",\r\n    type: themePropTypes.style\r\n  },\r\n  selectLoad: {\r\n    name: \"COMPANY_INPUT_SELECT_LOAD\",\r\n    description: \"Select load\",\r\n    type: themePropTypes.style\r\n  },\r\n  selectClose: {\r\n    name: \"COMPANY_INPUT_SELECT_CLOSE\",\r\n    description: \"Select close\",\r\n    type: themePropTypes.style\r\n  },\r\n  selectWrapper: {\r\n    name: \"COMPANY_INPUT_SELECT_WRAPPER\",\r\n    description: \"Select wrapper\",\r\n    type: themePropTypes.style\r\n  },\r\n  selectList: {\r\n    name: \"COMPANY_INPUT_SELECT_LIST\",\r\n    description: \"Select list\",\r\n    type: themePropTypes.style\r\n  },\r\n  selectItem: {\r\n    name: \"COMPANY_INPUT_SELECT_ITEM\",\r\n    description: \"Select item\",\r\n    type: themePropTypes.style\r\n  },\r\n  selectFlag: {\r\n    name: \"COMPANY_INPUT_FLAG\",\r\n    description: \"Input flag\",\r\n    type: themePropTypes.style\r\n  },\r\n  orgNo: {\r\n    name: \"COMPANY_INPUT_ORG_NO\",\r\n    description: \"Input flag\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst Load = () => keyframes`\r\n  from {\r\n    background-color: ${color.bg};\r\n    ${applyVariants(CompanyInput.themeProps.animateLoadFrom)}\r\n  }\r\n\r\n  to {\r\n    background-color: ${color.primary};\r\n    ${applyVariants(CompanyInput.themeProps.animateLoadTo)}\r\n  }\r\n`\r\n\r\nconst SelectLabel = styled(Label)`\r\n  ${applyVariants(CompanyInput.themeProps.selectLabel)};\r\n`\r\n\r\nconst SelectLoad = styled.div`\r\n  background-color: ${color.white};\r\n  animation: 0.8s ${Load} ease-in-out infinite alternate;\r\n  height: ${spacing.tiny};\r\n  width: 100%;\r\n  position: absolute;\r\n  cursor: pointer;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 10;\r\n  box-shadow: 0px ${spacing.small} ${spacing.medium} rgba(0, 0, 0, 0.06);\r\n  ${applyVariants(CompanyInput.themeProps.selectLoad)};\r\n`\r\n\r\nconst Close = styled.button`\r\n  border-width: 0;\r\n  background-color: transparent;\r\n  color: ${color.primary};\r\n  cursor: pointer;\r\n  &:hover,\r\n  &:focus,\r\n  &:active {\r\n    outline: none;\r\n    color: ${color.text};\r\n  }\r\n  svg {\r\n    width: ${spacing.medium};\r\n  }\r\n  ${applyVariants(CompanyInput.themeProps.selectClose)};\r\n`\r\nconst ModifiedFlag = styled(Flag)`\r\n  padding: ${spacing.tiny} ${spacing.tiny} ${spacing.tiny} ${spacing.medium};\r\n  position: relative;\r\n  ${applyVariants(CompanyInput.themeProps.selectFlag)};\r\n`\r\n\r\nconst OrgNo = styled.div`\r\n  font-size: ${font.tiny};\r\n  color: ${color.wcag};\r\n  ${applyVariants(CompanyInput.themeProps.orgNo)};\r\n`\r\n\r\nconst SelectWrapper = styled.div`\r\n  position: relative;\r\n  ${applyVariants(CompanyInput.themeProps.selectWrapper)};\r\n`\r\nconst SelectList = styled.ul`\r\n  position: absolute;\r\n  cursor: pointer;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 10;\r\n  width: 100%;\r\n  background: ${color.white};\r\n  box-shadow: 0px ${spacing.small} ${spacing.medium} rgba(0, 0, 0, 0.06);\r\n  ${applyVariants(CompanyInput.themeProps.selectList)};\r\n`\r\n\r\nconst SelectItem = styled.li`\r\n  list-style: none;\r\n  padding: ${spacing.small} ${spacing.medium};\r\n  background-color: ${p => (p.isSelected ? color.primary : \"transparent\")};\r\n  color: ${p => (p.isSelected ? color.white : color.black)};\r\n  border-bottom: 1px solid ${color.line};\r\n\r\n  ${OrgNo} {\r\n    color: ${p => (p.isSelected ? color.white : color.wcag)};\r\n  }\r\n\r\n  &:first-child {\r\n    border-top: 1px solid ${color.line};\r\n  }\r\n  ${applyVariants(CompanyInput.themeProps.selectItem)};\r\n`\r\n\r\nCompanyInput.propTypes = {\r\n  searchTimeout: PropTypes.number,\r\n  onSelect: PropTypes.func,\r\n  selected: PropTypes.object,\r\n  onSearch: PropTypes.func,\r\n  mapItem: PropTypes.func,\r\n  id: PropTypes.string.isRequired\r\n}\r\n\r\nCompanyInput.defaultProps = {\r\n  searchTimeout: 200,\r\n  onSelect: null,\r\n  selected: null,\r\n  mapItem: defaultMapItem\r\n}\r\n\r\nexport default CompanyInput\r\n","CurrencyInput":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Input, { InputPropTypes } from \"../Input\"\r\n/**\r\n * Input for numbers and Currencies with possibilities to add prefix/suffix and optional thousand-seperators.\r\n */\r\nconst CurrencyInput = React.forwardRef(\r\n  ({ prefix = null, delimiter = \" \", options = {}, ...props }, ref) => {\r\n    return (\r\n      <Input\r\n        type=\"tel\"\r\n        options={{ ...options, numeral: true, delimiter, prefix }}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    )\r\n  }\r\n)\r\n\r\n/* TODO: Should have a pattern so that we get number-keyboard: added this: https://stackoverflow.com/questions/6178556/phone-numeric-keyboard-for-text-input */\r\n\r\nCurrencyInput.propTypes = {\r\n  ...InputPropTypes,\r\n  id: PropTypes.string.isRequired,\r\n  suffix: PropTypes.string,\r\n  prefix: PropTypes.string,\r\n  thousandsSeparatorSymbol: PropTypes.string\r\n}\r\n\r\nCurrencyInput.defaultProps = {\r\n  suffix: \"\",\r\n  prefix: \"\",\r\n  thousandsSeparatorSymbol: \" \"\r\n}\r\n\r\nexport default CurrencyInput\r\n","EmailInput":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport { color } from \"../../../../theming\"\r\n\r\nimport Input, { inputCss } from \"../Input\"\r\n\r\nconst tProps = {}\r\n\r\nconst getX = value => {\r\n  const temp = document.getElementById(\"tempLength\")\r\n  if (!temp) {\r\n    console.log(\"cant be found\", document)\r\n    return 0\r\n  }\r\n  temp.innerText = value\r\n  return temp.clientWidth + 1 // magic number, bur seems consisten\r\n}\r\nclass EmailInput extends React.Component {\r\n  constructor(props, context) {\r\n    super(props, context)\r\n\r\n    this.state = {\r\n      value: \"\",\r\n      isValid: false\r\n    }\r\n\r\n    this.emailInput = React.createRef()\r\n\r\n    this.handleChange = this.handleChange.bind(this)\r\n  }\r\n\r\n  handleChange(e) {\r\n    const { value } = e.target\r\n    const isValid = this.emailInput.current.validity.valid\r\n    this.setState({ value, isValid }, () => {\r\n      if (this.props.onChange) {\r\n        this.props.onChange(this.state)\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { value, isValid } = this.state\r\n    return (\r\n      <Wrapper isValid={value && isValid}>\r\n        <Input\r\n          type={\"email\"}\r\n          {...this.props}\r\n          value={value}\r\n          onChange={this.handleChange}\r\n          ref={this.emailInput}\r\n        />\r\n        <AtSymbol isValid={isValid} x={getX(value.split(\"@\")[0])}>\r\n          @\r\n        </AtSymbol>\r\n        <AtSymbol isValid={isValid} x={getX(value.split(\".\")[0])}>\r\n          .\r\n        </AtSymbol>\r\n        <Hidden id={\"tempLength\"} />\r\n      </Wrapper>\r\n    )\r\n  }\r\n}\r\n\r\nconst Hidden = styled.div`\r\n  position: absolute;\r\n  visibility: hidden;\r\n  height: auto;\r\n  width: auto;\r\n  white-space: nowrap;\r\n`\r\n\r\nconst AtSymbol = styled.div`\r\n  ${inputCss};\r\n  border: 0;\r\n  width: auto;\r\n  color: ${color.text};\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: ${({ x }) => x}px;\r\n  pointer-events: none;\r\n  z-index: 1;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n`\r\n\r\nEmailInput.propTypes = {\r\n  onChange: PropTypes.func\r\n}\r\n\r\nEmailInput.defaultProps = {}\r\n\r\nEmailInput.themeProps = tProps\r\n\r\nexport default EmailInput\r\n","FileInput":"import React, { Component } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport hideVisually from \"../../../../theming/styles/hideVisually\"\r\nimport Upload from \"../../../Icons/Upload\"\r\nimport {\r\n  commonPropTypes,\r\n  themePropTypes\r\n} from \"../../../../constants/themeContants\"\r\nimport {\r\n  color,\r\n  font,\r\n  spacing,\r\n  targetSize,\r\n  fontFamily,\r\n  borderRadius,\r\n  fontWeight,\r\n  applyVariants\r\n} from \"../../../../theming\"\r\nimport ThemeComponent from \"../../../Theme/ThemeComponent\"\r\nconst tinycolor = require(\"tinycolor2\")\r\n\r\nclass FileInput extends Component {\r\n  constructor(props, context) {\r\n    super(props, context)\r\n    this.fileInput = React.createRef() // To get the number of uploaded files from the input in case of multiple files\r\n    this.state = {\r\n      uploadedFile: null\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this)\r\n  }\r\n\r\n  handleChange(e) {\r\n    const { value } = e.target\r\n\r\n    if (this.fileInput.current.files.length > 1) {\r\n      this.setState({\r\n        uploadedFile:\r\n          this.fileInput.current.files.length +\r\n          \" \" +\r\n          this.props.multipleFilesLabel\r\n      })\r\n    } else if (value.length) {\r\n      this.setState({\r\n        uploadedFile: this.props.showFileName\r\n          ? value.split(\"\\\\\").pop()\r\n          : \"1 \" + this.props.singleFileLabel\r\n      })\r\n    }\r\n    this.props.onChange && this.props.onChange(e)\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      children,\r\n      id,\r\n      disabled,\r\n      className,\r\n      variant,\r\n      accept,\r\n      multiple,\r\n      onChange,\r\n      ...restProps\r\n    } = this.props\r\n\r\n    return (\r\n      <FileWrapper\r\n        variant={variant}\r\n        className={className}\r\n        title={this.state.uploadedFile}\r\n      >\r\n        <Input\r\n          type=\"file\"\r\n          ref={this.fileInput} // To get the number of uploaded files from the input in case of multiple files\r\n          accept={accept}\r\n          id={id}\r\n          disabled={disabled}\r\n          onChange={this.handleChange}\r\n          multiple={multiple}\r\n          variant={variant}\r\n          {...restProps}\r\n        />\r\n        <Label htmlFor={id} variant={variant}>\r\n          <Icon variant={variant} />\r\n          <span>\r\n            {this.state.uploadedFile ? this.state.uploadedFile : children}\r\n          </span>\r\n        </Label>\r\n      </FileWrapper>\r\n    )\r\n  }\r\n}\r\n\r\nFileInput.themeProps = {\r\n  wrapper: {\r\n    name: \"FileInput_Wrapper\",\r\n    description: \"FileInput wrapper style\",\r\n    type: themePropTypes.style\r\n  },\r\n  input: {\r\n    name: \"FileInput_Input\",\r\n    description: \"Input style – default is hidden! Style the label instead.\",\r\n    type: themePropTypes.style\r\n  },\r\n  label: {\r\n    name: \"FileInput_Label\",\r\n    description: \"Label style\",\r\n    type: themePropTypes.style\r\n  },\r\n  icon: {\r\n    name: \"FileInput_Icon_Style\",\r\n    description: \"Icon style\",\r\n    type: themePropTypes.style\r\n  },\r\n  iconComponent: {\r\n    name: \"FileInput_Icon_Component\",\r\n    description: \"Icon component\",\r\n    type: themePropTypes.component\r\n  }\r\n}\r\n\r\nconst FileWrapper = styled.div`\r\n  ${applyVariants(FileInput.themeProps.wrapper)};\r\n`\r\n\r\nconst Input = styled.input`\r\n  ${hideVisually};\r\n  ${applyVariants(FileInput.themeProps.input)};\r\n`\r\n\r\nconst Label = styled.label`\r\n  cursor: pointer;\r\n  background-color: ${color.primary};\r\n  color: ${p =>\r\n    tinycolor\r\n      .mostReadable(color.primary()(p), [\"#fff\"], {\r\n        includeFallbackColors: true,\r\n        level: \"AA\",\r\n        size: \"large\"\r\n      })\r\n      .toString()};\r\n  border-width: 0;\r\n  border-radius: ${borderRadius};\r\n  padding: ${spacing.tiny} ${spacing.medium};\r\n  cursor: pointer;\r\n  min-height: ${targetSize.normal};\r\n  text-decoration: none;\r\n  text-align: center;\r\n  display: inline-block;\r\n  font-size: ${font.base};\r\n  font-family: ${fontFamily.body};\r\n  line-height: 32px;\r\n  font-weight: ${fontWeight.bold};\r\n  white-space: nowrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  transition: background 0.2s ease;\r\n\r\n  > span {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n\r\n  &:hover,\r\n  &:focus {\r\n    outline: none;\r\n    background-color: ${p =>\r\n      tinycolor(color.primary()(p))\r\n        .darken(5)\r\n        .toString()};\r\n    color: ${p =>\r\n      tinycolor\r\n        .mostReadable(tinycolor(color.primary()(p)).darken(5), [\"#fff\"], {\r\n          includeFallbackColors: true,\r\n          level: \"AA\",\r\n          size: \"large\"\r\n        })\r\n        .toString()};\r\n  }\r\n\r\n  ${applyVariants(FileInput.themeProps.label)};\r\n`\r\n\r\nconst IconComponent = ({ ...props }) => (\r\n  <ThemeComponent\r\n    tagName={FileInput.themeProps.iconComponent}\r\n    fallback={Upload}\r\n    {...props}\r\n  />\r\n)\r\n\r\nexport const Icon = styled(IconComponent)`\r\n  display: block;\r\n  height: 12px;\r\n  width: 12px;\r\n  margin-right: 3px;\r\n  ${applyVariants(FileInput.themeProps.icon)};\r\n`\r\n\r\nFileInput.propTypes = {\r\n  accept: PropTypes.string,\r\n  children: commonPropTypes.children.isRequired,\r\n  disabled: PropTypes.bool,\r\n  id: PropTypes.string.isRequired,\r\n  input: PropTypes.any,\r\n  onChange: PropTypes.func,\r\n  className: PropTypes.string,\r\n  ignoreBase: PropTypes.func,\r\n  variant: PropTypes.string,\r\n  multipleFilesLabel: PropTypes.string,\r\n  singleFileLabel: PropTypes.string,\r\n  showFileName: PropTypes.bool\r\n}\r\n\r\nFileInput.defaultProps = {\r\n  disabled: false,\r\n  input: {},\r\n  onChange: null,\r\n  className: \"\",\r\n  multipleFilesLabel: \"files\",\r\n  singleFileLabel: \"file\",\r\n  showFileName: true\r\n}\r\n\r\nexport default FileInput\r\n","Input":"/**\r\n * @class Input\r\n */\r\n\r\nimport React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled, { css } from \"styled-components\"\r\nimport Cleave from \"cleave.js\"\r\nimport Label from \"../Label/Label\"\r\nimport {\r\n  commonPropTypes,\r\n  themePropTypes\r\n} from \"../../../constants/themeContants\"\r\nimport {\r\n  applyVariants,\r\n  color,\r\n  spacing,\r\n  borderRadius,\r\n  font,\r\n  targetSize,\r\n  fontFamily\r\n} from \"../../../theming\"\r\nimport ThemeComponent from \"../../Theme/ThemeComponent\"\r\nimport QuestionMark from \"../../Icons/QuestionMark\"\r\nimport { FadeIn } from \"@staccx/animations\"\r\n\r\nconst HelpBox = ({ onClick }) => (\r\n  <HelpButton onClick={onClick} type={\"button\"}>\r\n    <QuestionMark />\r\n  </HelpButton>\r\n)\r\n\r\nclass Input extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      isVisible: false\r\n    }\r\n    this.input = React.createRef()\r\n    this.focus = this.focus.bind(this)\r\n    this.setRawValue = this.setRawValue.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.options) {\r\n      this.cleave = new Cleave(this.input.current, {\r\n        ...this.props.options,\r\n        onValueChanged: this.props.onChange\r\n      })\r\n      if (this.props.defaultValue) {\r\n        this.cleave.setRawValue(this.props.defaultValue)\r\n      }\r\n    }\r\n  }\r\n\r\n  focus() {\r\n    this.input.focus()\r\n  }\r\n\r\n  setRawValue(rawValue) {\r\n    if (!this.cleave) {\r\n      console.warn(\"setRawValue not supported for non cleave inputs\")\r\n      return\r\n    }\r\n\r\n    this.cleave.setRawValue(rawValue)\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      autoFocus,\r\n      className,\r\n      disabled,\r\n      id,\r\n      name,\r\n      onBlur,\r\n      onFocus,\r\n      onChange,\r\n      onKeyDown,\r\n      placeholder,\r\n      type,\r\n      value,\r\n      label,\r\n      mask,\r\n      variant,\r\n      autoComplete,\r\n      options,\r\n      helpText,\r\n      ...otherProps\r\n    } = this.props\r\n\r\n    return (\r\n      <InputWrapper className={className} variant={variant}>\r\n        {label && (\r\n          <InputLabel variant={variant} htmlFor={id}>\r\n            {label}\r\n            {helpText && (\r\n              <NoWrapSpan>\r\n                &nbsp;\r\n                <HelpIcon\r\n                  onClick={() =>\r\n                    this.setState({ isVisible: !this.state.isVisible })\r\n                  }\r\n                />\r\n              </NoWrapSpan>\r\n            )}\r\n          </InputLabel>\r\n        )}\r\n        {helpText && (\r\n          <HelpText isVisible={this.state.isVisible}>{helpText}</HelpText>\r\n        )}\r\n\r\n        <InputNoMask\r\n          autoFocus={autoFocus}\r\n          value={value}\r\n          disabled={disabled}\r\n          id={id}\r\n          name={name}\r\n          onFocus={onFocus}\r\n          onBlur={onBlur}\r\n          onChange={onChange}\r\n          onKeyDown={onKeyDown}\r\n          placeholder={placeholder}\r\n          variant={variant}\r\n          type={type}\r\n          ref={this.input}\r\n          autoComplete={autoComplete}\r\n          {...otherProps}\r\n        />\r\n      </InputWrapper>\r\n    )\r\n  }\r\n}\r\n\r\nInput.themeProps = {\r\n  iconComponent: {\r\n    name: \"INPUT_HELP_ICON_COMPONENT\",\r\n    description: \"Icon shown. Defaults to Caret\",\r\n    type: themePropTypes.component\r\n  },\r\n  icon: {\r\n    name: \"INPUT_HELP_ICON_STYLE\",\r\n    description: \"Icon style\",\r\n    type: themePropTypes.style\r\n  },\r\n  input: {\r\n    name: \"INPUT\",\r\n    description: \"Input style\",\r\n    type: themePropTypes.style\r\n  },\r\n  wrapper: {\r\n    name: \"INPUT_WRAPPER\",\r\n    description: \"Wrapper style\",\r\n    type: themePropTypes.style\r\n  },\r\n  label: {\r\n    name: \"INPUT_LABEL\",\r\n    description: \"Label style\",\r\n    type: themePropTypes.style\r\n  },\r\n  helpText: {\r\n    name: \"INPUT_HELPTEXT\",\r\n    description: \"Helptext style\",\r\n    type: themePropTypes.style\r\n  },\r\n  helpButton: {\r\n    name: \"BUTTON_HELP\",\r\n    description: \"Help button style\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst IconComponent = ({ ...props }) => (\r\n  <ThemeComponent\r\n    tagName={Input.themeProps.iconComponent.name}\r\n    fallback={HelpBox}\r\n    {...props}\r\n  />\r\n)\r\n\r\nconst HelpButton = styled.button`\r\n  -webkit-appearance: none;\r\n  border: initial;\r\n  padding: 0;\r\n  cursor: pointer;\r\n  line-height: 0;\r\n  ${applyVariants(Input.themeProps.helpButton)};\r\n`\r\n\r\nconst HelpIcon = styled(IconComponent)`\r\n  ${applyVariants(Input.themeProps.icon.name)};\r\n`\r\n\r\nconst NoWrapSpan = styled.span`\r\n  white-space: nowrap;\r\n`\r\n\r\nconst HelpText = styled.div`\r\n  display: ${p => (p.isVisible ? \"block\" : \"none\")};\r\n  opacity: 0;\r\n  animation: ${FadeIn} 0.4s ease-out 1 forwards;\r\n  ${applyVariants(Input.themeProps.helpText)};\r\n`\r\n\r\nconst InputLabel = styled(Label)`\r\n  ${applyVariants(Input.themeProps.label)};\r\n`\r\n\r\nexport const InputWrapper = styled.div`\r\n  display: block;\r\n  margin-bottom: 0;\r\n  position: relative;\r\n  ${applyVariants(Input.themeProps.wrapper)};\r\n`\r\n\r\nexport const inputCss = css`\r\n  display: block;\r\n  width: 100%;\r\n  min-height: ${targetSize.normal};\r\n  margin: 0 auto;\r\n  border: 1px solid ${color.line};\r\n  border-radius: ${borderRadius};\r\n  padding-left: ${spacing.small};\r\n  padding-right: ${spacing.small};\r\n  font-family: ${fontFamily.body};\r\n  font-size: ${font.input};\r\n  transition: border-color 0.2s ease-out;\r\n  -webkit-appearance: none;\r\n  appearance: none;\r\n  -moz-appearance: textfield;\r\n\r\n  &::-webkit-input-placeholder {\r\n    /* WebKit browsers */\r\n    color: ${color.line};\r\n  }\r\n  &:-moz-placeholder {\r\n    /* Mozilla Firefox 4 to 18 */\r\n    color: ${color.line};\r\n  }\r\n  &::-moz-placeholder {\r\n    /* Mozilla Firefox 19+ */\r\n    color: ${color.line};\r\n  }\r\n  &:-ms-input-placeholder {\r\n    /* Internet Explorer 10+ */\r\n    color: ${color.line};\r\n  }\r\n  &:-webkit-autofill {\r\n    background-color: ${color.bg};\r\n  }\r\n\r\n  &:hover,\r\n  &:focus,\r\n  &:active {\r\n    outline: none;\r\n    background-color: ${color(\"subtleHover\")};\r\n  }\r\n\r\n  &::-webkit-inner-spin-button,\r\n  &::-webkit-outer-spin-button {\r\n    -webkit-appearance: none;\r\n    margin: 0;\r\n  }\r\n\r\n  ${p => p.additionalCSS || null};\r\n  ${applyVariants(Input.themeProps.input)};\r\n`\r\n\r\nconst InputNoMask = styled.input`\r\n  ${inputCss};\r\n`\r\n\r\nexport const InputPropTypes = {\r\n  autoFocus: PropTypes.bool,\r\n  callback: PropTypes.func,\r\n  /**\r\n   * Disabled prop\r\n   * @export\r\n   */\r\n  disabled: PropTypes.bool,\r\n  hidden: PropTypes.bool,\r\n  id: PropTypes.string,\r\n  name: PropTypes.string,\r\n  onBlur: PropTypes.func,\r\n  onChange: PropTypes.func,\r\n  onKeyDown: PropTypes.func,\r\n  placeholder: PropTypes.string,\r\n  style: PropTypes.object,\r\n  type: PropTypes.oneOf([\r\n    \"text\",\r\n    \"email\",\r\n    \"number\",\r\n    \"tel\",\r\n    \"url\",\r\n    \"search\",\r\n    \"date\"\r\n  ]),\r\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  label: PropTypes.string,\r\n  className: PropTypes.string,\r\n  helpText: commonPropTypes.children,\r\n  mask: PropTypes.oneOfType([\r\n    PropTypes.array,\r\n    PropTypes.func,\r\n    PropTypes.bool,\r\n    PropTypes.shape({\r\n      mask: PropTypes.oneOfType([PropTypes.array, PropTypes.func]),\r\n      pipe: PropTypes.func\r\n    })\r\n  ])\r\n}\r\n\r\nInput.propTypes = InputPropTypes\r\n\r\nexport const InputDefaultProps = {\r\n  autoFocus: null,\r\n  callback: null,\r\n  disabled: false,\r\n  hidden: false,\r\n  name: null,\r\n  onBlur: null,\r\n  onChange: null,\r\n  onKeyDown: null,\r\n  placeholder: null,\r\n  style: null,\r\n  type: \"text\",\r\n  value: undefined,\r\n  label: \"\",\r\n  mask: null,\r\n  helpText: \"\"\r\n}\r\n\r\nInput.defaultProps = InputDefaultProps\r\n/** @component */\r\nexport default Input\r\n","NationalIdInput":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Input, { InputPropTypes } from \"../Input\"\r\n\r\nconst options = {\r\n  nb: { blocks: [6, 5], numericOnly: true, delimiter: \"·\" }\r\n}\r\n/**\r\n * Input for National ID Numbers.\r\n */\r\nconst NationalIdInput = React.forwardRef(\r\n  ({ mask, id, guide, locale = \"nb\", ...otherProps }, ref) => (\r\n    <Input\r\n      type={\"tel\"}\r\n      ref={ref}\r\n      options={options[locale]}\r\n      id={id}\r\n      {...otherProps}\r\n    />\r\n  )\r\n)\r\n\r\nNationalIdInput.propTypes = {\r\n  ...InputPropTypes,\r\n  locale: PropTypes.oneOf([\"nb\"]),\r\n  id: PropTypes.string.isRequired,\r\n  guide: PropTypes.bool\r\n}\r\n\r\nNationalIdInput.defaultProps = {\r\n  locale: \"nb\",\r\n  guide: false\r\n}\r\n\r\nexport default NationalIdInput\r\n","PhoneInput":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport Input, { InputPropTypes } from \"../Input\"\r\nimport \"cleave.js/dist/addons/cleave-phone.no.js\"\r\nimport { applyVariants, spacing, themePropTypes } from \"../../../../theming\"\r\nimport countries, { NORWAY } from \"../../../../data/countries\"\r\nimport Select from \"../../Select/Select\"\r\nimport Label from \"../../Label/Label\"\r\n\r\n/**\r\n * Input for Phone-numbers.\r\n * TODO: normalize country code and locale\r\n */\r\nconst PhoneInput = React.forwardRef(\r\n  (\r\n    {\r\n      locale,\r\n      label,\r\n      showCountryCode = false,\r\n      initialCountry = NORWAY,\r\n      initialCountryCode = NORWAY.code,\r\n      onCountryChange,\r\n      ...otherProps\r\n    },\r\n    ref\r\n  ) => {\r\n    return (\r\n      <PhoneInputWrapper {...otherProps}>\r\n        <Label {...otherProps}>{label}</Label>\r\n        <Wrap {...otherProps}>\r\n          {showCountryCode && (\r\n            <CountryCode>\r\n              <Select\r\n                {...otherProps}\r\n                items={countries}\r\n                itemToString={item => `+${item.code}`}\r\n                itemToKey={item => item.code}\r\n                initialSelectedItem={\r\n                  initialCountryCode\r\n                    ? countries.find(c => c.code === initialCountryCode)\r\n                    : initialCountry\r\n                }\r\n                onChange={country => {\r\n                  if (onCountryChange) {\r\n                    onCountryChange(country)\r\n                  }\r\n                }}\r\n              />\r\n            </CountryCode>\r\n          )}\r\n          <PInput\r\n            type={\"tel\"}\r\n            ref={ref}\r\n            options={{\r\n              phone: true,\r\n              phoneRegionCode: locale\r\n            }}\r\n            {...otherProps}\r\n          />\r\n        </Wrap>\r\n      </PhoneInputWrapper>\r\n    )\r\n  }\r\n)\r\n\r\nPhoneInput.themeProps = {\r\n  wrapper: {\r\n    name: \"PHONE_WRAPPER\",\r\n    description: \"Wrapper style\",\r\n    type: themePropTypes.style\r\n  },\r\n  countryCode: {\r\n    name: \"PHONE_COUNTRY_CODE\",\r\n    description: \"Country code style\",\r\n    type: themePropTypes.style\r\n  },\r\n  input: {\r\n    name: \"PHONE_INPUT\",\r\n    description: \"Specific Input style\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst PhoneInputWrapper = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst Wrap = styled.div`\r\n  width: 100%;\r\n  position: relative;\r\n  display: flex;\r\n  align-items: flex-end;\r\n  justify-content: space-between;\r\n  ${applyVariants(PhoneInput.themeProps.wrapper)};\r\n`\r\n\r\nconst CountryCode = styled.div`\r\n  flex-grow: 0.3;\r\n  margin-right: ${spacing.small};\r\n`\r\n\r\nconst PInput = styled(Input)`\r\n  flex-grow: 1;\r\n  ${applyVariants(PhoneInput.themeProps.input)};\r\n`\r\n\r\nPhoneInput.propTypes = {\r\n  ...InputPropTypes,\r\n  locale: PropTypes.oneOf([\"no\"]),\r\n  onChange: PropTypes.func,\r\n  guide: PropTypes.bool,\r\n  id: PropTypes.string.isRequired\r\n}\r\n\r\nPhoneInput.defaultProps = {\r\n  locale: \"no\",\r\n  guide: false\r\n}\r\n\r\nexport default PhoneInput\r\n","PostalCodeInput":"import React, { useState, useEffect, useRef } from \"react\"\r\nimport axios from \"axios\"\r\nimport styled from \"styled-components\"\r\nimport PropTypes from \"prop-types\"\r\nimport Input, { InputPropTypes } from \"../Input\"\r\nimport Loading from \"../../../DataViz/Loading/Loading\"\r\nimport { FadeIn } from \"@staccx/animations\"\r\nimport {\r\n  applyVariants,\r\n  spacing,\r\n  targetSize,\r\n  color,\r\n  font\r\n} from \"../../../../theming\"\r\nimport { themePropTypes } from \"../../../../constants/themeContants\"\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: `https://fraktguide.bring.no/fraktguide/api`\r\n})\r\n\r\nfunction getAxiosOptions() {\r\n  const opt = {\r\n    transformRequest: [\r\n      function(data, headers) {\r\n        delete headers.common.Authorization\r\n        return data\r\n      }\r\n    ]\r\n  }\r\n  return opt\r\n}\r\n\r\n/**\r\n * Input for Norwegian Postal codes. Adds PostalPlace according to the number. Input is imported from Input-component\r\n */\r\nconst PostalCodeInput = ({ defaultValue, onChange, variant, ...restProps }) => {\r\n  const [place, setPlace] = useState(null)\r\n  const [postalCode, setPostalCode] = useState(defaultValue)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const inputRef = useRef(null)\r\n\r\n  const getPostalPlace = async () => {\r\n    setIsLoading(true)\r\n    try {\r\n      const place = await axiosInstance\r\n        .get(`/postalCode.json?country=no&pnr=${postalCode}`, getAxiosOptions())\r\n        .then(result => result.data)\r\n      setPlace(place)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n\r\n    setIsLoading(false)\r\n  }\r\n\r\n  const handleChange = e => {\r\n    const { rawValue: value } = e.target\r\n    setPostalCode(value)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (postalCode && !isNaN(postalCode) && postalCode.length >= 4) {\r\n      getPostalPlace(postalCode)\r\n    } else {\r\n      setPlace(null)\r\n    }\r\n  }, [postalCode])\r\n\r\n  useEffect(() => {\r\n    if (onChange) {\r\n      onChange({ place, postalCode })\r\n    }\r\n  }, [place, postalCode])\r\n\r\n  useEffect(() => {\r\n    if (postalCode !== defaultValue) {\r\n      setPostalCode(defaultValue)\r\n      inputRef.current.setRawValue(defaultValue)\r\n    }\r\n  }, [defaultValue])\r\n\r\n  return (\r\n    <PostalInputWrapper variant={variant}>\r\n      <PostalInput\r\n        type={\"text\"}\r\n        pattern={\"[0-9]{4}\"}\r\n        options={{ blocks: [4] }}\r\n        defaultValue={defaultValue}\r\n        variant={variant}\r\n        {...restProps}\r\n        onChange={handleChange}\r\n        ref={inputRef}\r\n      />\r\n      {isLoading && <Loading />}\r\n      {place && (\r\n        <Location valid={place.valid} variant={variant}>\r\n          {place.result}\r\n        </Location>\r\n      )}\r\n    </PostalInputWrapper>\r\n  )\r\n}\r\n\r\nPostalCodeInput.themeProps = {\r\n  wrapper: {\r\n    name: \"POSTAL_WRAPPER\",\r\n    description: \"Wrapper style\",\r\n    type: themePropTypes.style\r\n  },\r\n  location: {\r\n    name: \"POSTAL_LOCATION\",\r\n    description: \"Location style\",\r\n    type: themePropTypes.style\r\n  },\r\n  input: {\r\n    name: \"POSTAL_INPUT\",\r\n    description: \"Specific Input style\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst PostalInputWrapper = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  align-items: flex-end;\r\n  justify-content: flex-start;\r\n  ${applyVariants(PostalCodeInput.themeProps.wrapper)};\r\n`\r\n\r\nconst Location = styled.div`\r\n  padding-left: ${spacing.small};\r\n  min-height: ${targetSize.normal};\r\n  align-items: center;\r\n  vertical-align: middle;\r\n  display: flex;\r\n  font-size: ${font.input};\r\n  color: ${p => (p.valid ? color(\"wcag\")(p) : color(\"warning\")(p))};\r\n  opacity: 0;\r\n  animation: ${FadeIn} 0.8s ease-out forwards 1;\r\n  ${applyVariants(PostalCodeInput.themeProps.location)};\r\n`\r\n\r\nconst PostalInput = styled(Input)`\r\n  width: 5em;\r\n  ${applyVariants(PostalCodeInput.themeProps.input)};\r\n`\r\n\r\n// TODO: debounce calls?\r\nPostalCodeInput.propTypes = {\r\n  ...InputPropTypes,\r\n  locale: PropTypes.oneOf([\"nb\"]),\r\n  onChange: PropTypes.func\r\n}\r\n\r\nPostalCodeInput.defaultProps = {\r\n  locale: \"nb\"\r\n}\r\n\r\nexport default PostalCodeInput\r\n","Label":"/**\r\n * @class Label\r\n */\r\n\r\nimport React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport {\r\n  applyVariants,\r\n  font,\r\n  spacing,\r\n  fontFamily,\r\n  fontWeight\r\n} from \"../../../theming\"\r\nimport {\r\n  commonPropTypes,\r\n  themePropTypes\r\n} from \"../../../constants/themeContants\"\r\n\r\nconst Label = ({ className, children, ...rest }) => (\r\n  <LabelElement className={className} {...rest}>\r\n    {children}\r\n  </LabelElement>\r\n)\r\n\r\nLabel.themeProps = {\r\n  label: {\r\n    name: \"LABEL\",\r\n    description: \"Label style\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst LabelElement = styled.label`\r\n  font-weight: ${fontWeight.bold};\r\n  font-family: ${fontFamily.body};\r\n  font-size: ${font.base};\r\n  line-height: 1.2;\r\n  padding-bottom: ${spacing.tiny};\r\n  display: block;\r\n  ${applyVariants(Label.themeProps.label)};\r\n`\r\n\r\nLabel.defaultProps = {\r\n  className: \"\"\r\n}\r\n\r\nLabel.propTypes = {\r\n  children: commonPropTypes.children.isRequired,\r\n  className: PropTypes.string\r\n}\r\n\r\n/** @component */\r\nexport default Label\r\n","Legend":"/**\r\n * @class Legend\r\n */\r\n\r\nimport React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport {\r\n  applyVariants,\r\n  font,\r\n  spacing,\r\n  fontFamily,\r\n  fontWeight\r\n} from \"../../../theming\"\r\nimport {\r\n  commonPropTypes,\r\n  themePropTypes\r\n} from \"../../../constants/themeContants\"\r\n\r\nconst Legend = ({ className, children, ...rest }) => (\r\n  <LegendElement className={className} {...rest}>\r\n    {children}\r\n  </LegendElement>\r\n)\r\n\r\nLegend.themeProps = {\r\n  legend: {\r\n    name: \"LEGEND\",\r\n    description: \"Legend style\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst LegendElement = styled.legend`\r\n  font-weight: ${fontWeight.bold};\r\n  font-family: ${fontFamily.body};\r\n  font-size: ${font.h5};\r\n  line-height: 1.2;\r\n  padding-bottom: ${spacing.tiny};\r\n  display: block;\r\n  ${applyVariants(Legend.themeProps.legend)};\r\n`\r\n\r\nLegend.defaultProps = {\r\n  className: \"\"\r\n}\r\n\r\nLegend.propTypes = {\r\n  children: commonPropTypes.children.isRequired,\r\n  className: PropTypes.string\r\n}\r\n\r\n/** @component */\r\nexport default Legend\r\n","RadioButton":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport {\r\n  applyVariants,\r\n  targetSize,\r\n  spacing,\r\n  fontWeight,\r\n  fontFamily,\r\n  font,\r\n  color\r\n} from \"../../../theming\"\r\nimport {\r\n  commonPropTypes,\r\n  themePropTypes\r\n} from \"../../../constants/themeContants\"\r\n\r\nconst tProps = {\r\n  radio: {\r\n    name: \"RADIO_BUTTON_RADIO\",\r\n    description: \"Radio button style\",\r\n    type: themePropTypes.style\r\n  },\r\n  label: {\r\n    name: \"RADIO_BUTTON_LABEL\",\r\n    description: \"Label style\",\r\n    type: themePropTypes.style\r\n  },\r\n  wrapper: {\r\n    name: \"RADIO_BUTTON_WRAPPER\",\r\n    description: \"Wrapper style\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\nconst Radio = styled.input`\r\n  position: absolute;\r\n  clip: rect(0, 0, 0, 0);\r\n  clip: rect(0 0 0 0);\r\n\r\n  &:checked ~ label::after {\r\n    transform: scale(1);\r\n  }\r\n  ${applyVariants(tProps.radio)};\r\n`\r\n\r\nconst Label = styled.label`\r\n  position: relative;\r\n  padding: 0 0 0 ${spacing.mediumPlus};\r\n  width: auto;\r\n  letter-spacing: normal;\r\n  font-family: ${fontFamily.body};\r\n  font-size: ${font.base};\r\n  font-weight: ${fontWeight.normal};\r\n  cursor: pointer;\r\n\r\n  &::before {\r\n    content: \"\";\r\n    position: absolute;\r\n    top: -4px;\r\n    left: 0;\r\n    display: block;\r\n    width: ${spacing.medium};\r\n    height: ${spacing.medium};\r\n    border: 1px solid ${color.line};\r\n    border-radius: 50%;\r\n    background: ${color.white};\r\n  }\r\n\r\n  &::after {\r\n    content: \"\";\r\n    position: absolute;\r\n    top: 0px;\r\n    left: 4px;\r\n    display: block;\r\n    width: 16px;\r\n    height: 16px;\r\n    border-radius: 50%;\r\n    background-color: ${color.primary};\r\n    line-height: 20px;\r\n    transform: scale(0);\r\n    transition: all 0.2s ease-in-out;\r\n  }\r\n\r\n  ${applyVariants(tProps.label)};\r\n`\r\n\r\nconst RadioWrapper = styled.div`\r\n  min-height: ${targetSize.normal};\r\n  padding-top: ${spacing.small};\r\n  padding-bottom: ${spacing.small};\r\n\r\n  &:hover,\r\n  ${Radio}:focus ~ {\r\n    ${Label} {\r\n      &::before {\r\n        border-color: ${color.wcag};\r\n      }\r\n    }\r\n  }\r\n  ${applyVariants(tProps.wrapper)};\r\n`\r\n\r\nconst RadioButton = ({\r\n  children,\r\n  id,\r\n  group,\r\n  disabled,\r\n  onChange,\r\n  className,\r\n  defaultChecked,\r\n  variant,\r\n  ...otherProps\r\n}) => (\r\n  <RadioWrapper className={className} variant={variant}>\r\n    <Radio\r\n      id={id}\r\n      disabled={disabled}\r\n      type=\"radio\"\r\n      name={group}\r\n      onChange={onChange}\r\n      defaultChecked={defaultChecked}\r\n      variant={variant}\r\n      {...otherProps}\r\n    />\r\n    <Label htmlFor={id} variant={variant}>\r\n      {children}\r\n    </Label>\r\n  </RadioWrapper>\r\n)\r\n\r\nRadioButton.propTypes = {\r\n  children: commonPropTypes.children.isRequired,\r\n  className: PropTypes.string,\r\n  defaultChecked: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  group: PropTypes.string,\r\n  id: PropTypes.string.isRequired,\r\n  input: PropTypes.any,\r\n  onChange: PropTypes.func,\r\n  value: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.object\r\n  ])\r\n}\r\n\r\nRadioButton.defaultProps = {\r\n  className: \"\",\r\n  defaultChecked: false,\r\n  disabled: false,\r\n  input: {},\r\n  onChange: null,\r\n  value: \"\"\r\n}\r\n\r\nRadioButton.themeProps = tProps\r\n\r\nexport default RadioButton\r\n","RadioPill":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled, { css } from \"styled-components\"\r\nimport { themePropTypes } from \"../../../constants/themeContants\"\r\nimport { applyVariants } from \"../../../theming\"\r\n\r\nconst RadioPill = ({\r\n  children,\r\n  group,\r\n  onChange,\r\n  className,\r\n  full,\r\n  variant,\r\n  ...restProps\r\n}) => (\r\n  <RadioPillContainer className={className} full={full} variant={variant}>\r\n    {React.Children.map(children, child => {\r\n      if (child) {\r\n        return React.cloneElement(child, {\r\n          ...child.props,\r\n          onChange: onChange,\r\n          full: full,\r\n          variant: variant,\r\n          group\r\n        })\r\n      }\r\n    })}\r\n  </RadioPillContainer>\r\n)\r\n\r\nRadioPill.themeProps = {\r\n  container: {\r\n    name: \"RADIO_PILL\",\r\n    description: \"Container style\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst Full = css`\r\n  display: flex;\r\n  width: 100%;\r\n`\r\n\r\nconst RadioPillContainer = styled.div`\r\n  border: 0;\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: 0;\r\n  ${p => p.full && Full};\r\n  ${applyVariants(RadioPill.themeProps.container)};\r\n`\r\n\r\nRadioPill.defaultProps = {\r\n  onChange: null,\r\n  full: false\r\n}\r\n\r\nRadioPill.propTypes = {\r\n  children: PropTypes.arrayOf(PropTypes.element).isRequired,\r\n  className: PropTypes.string,\r\n  group: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func,\r\n  full: PropTypes.bool\r\n}\r\n\r\nexport default RadioPill\r\n","Select":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled, { css } from \"styled-components\"\r\nimport { stringIncludes } from \"@staccx/utils\"\r\nimport Label from \"../Label/Label\"\r\nimport Input from \"../Input/Input\"\r\nimport Caret from \"../../Icons/Caret\"\r\nimport SelectOption from \"./Select.Option\"\r\nimport Select2 from \"./Select2\"\r\nimport ThemeComponent from \"../../Theme/ThemeComponent\"\r\nimport {\r\n  applyVariants,\r\n  color,\r\n  spacing,\r\n  targetSize,\r\n  borderRadius\r\n} from \"../../../theming\"\r\nimport themeProps from \"./Select.themeProps\"\r\n\r\nconst CaretComp = ({ ...props }) => (\r\n  <ThemeComponent\r\n    tagName={themeProps.iconComponent}\r\n    fallback={Caret}\r\n    {...props}\r\n  />\r\n)\r\n\r\nconst CaretIcon = styled(CaretComp)`\r\n  transition: transform 0.3s ease-out;\r\n  transform: ${p => (p.isExpanded ? \"rotate(180deg)\" : \"rotate(0)\")};\r\n`\r\n\r\nclass Select extends React.PureComponent {\r\n  constructor(props, context) {\r\n    super(props, context)\r\n    this.state = {\r\n      filter: null,\r\n      selected: this.props.selectedItem\r\n        ? this.props.selectedItem\r\n        : !this.props.combobox\r\n        ? this.props.placeHolderLabel\r\n          ? this.props.placeHolderLabel\r\n          : this.props.items[0]\r\n        : null\r\n    }\r\n\r\n    this.setFilter = this.setFilter.bind(this)\r\n    this.filterItem = this.filterItem.bind(this)\r\n    this.handleSelect = this.handleSelect.bind(this)\r\n  }\r\n\r\n  handleSelect(selected) {\r\n    this.setState({ selected })\r\n  }\r\n  setFilter(filter) {\r\n    this.setState({ filter })\r\n  }\r\n\r\n  filterItem(item) {\r\n    const { filter } = this.state\r\n    const { filterProp } = this.props\r\n    const field = filterProp ? item[filterProp] : item\r\n    return filter ? stringIncludes(field, filter) : true\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      onChange,\r\n      placeHolderLabel,\r\n      itemToString,\r\n      className,\r\n      variant,\r\n      items,\r\n      initialSelectedItem\r\n    } = this.props\r\n\r\n    const Option = this.props.Option\r\n    const Selected = this.props.Selected || Option\r\n\r\n    const toString = item => {\r\n      if (!item) {\r\n        return \"\"\r\n      }\r\n      if (!placeHolderLabel || item !== placeHolderLabel) {\r\n        return itemToString(item)\r\n      }\r\n\r\n      return placeHolderLabel\r\n    }\r\n\r\n    const renderSelected = (selectedItem, getToggleButtonProps, { isOpen }) => (\r\n      <SelectWrapper className={className} variant={variant}>\r\n        {this.props.label && (\r\n          <Label variant={variant}>{this.props.label}</Label>\r\n        )}\r\n        <SelectedWrapper variant={variant} isSelected>\r\n          {this.props.renderSelected ? (\r\n            this.props.renderSelected({\r\n              selectedItem,\r\n              getToggleButtonProps\r\n            })\r\n          ) : (\r\n            <React.Fragment>\r\n              <Selected\r\n                {...getToggleButtonProps()}\r\n                selectedItem={selectedItem}\r\n                variant={variant}\r\n                isSelected\r\n              >\r\n                {toString(selectedItem)}\r\n              </Selected>\r\n              <IconButton\r\n                {...getToggleButtonProps()}\r\n                variant={variant}\r\n                type={\"button\"}\r\n                tabIndex={-1}\r\n                isSelected\r\n              >\r\n                <CaretIcon isExpanded={isOpen} variant={variant} />\r\n              </IconButton>\r\n            </React.Fragment>\r\n          )}\r\n        </SelectedWrapper>\r\n      </SelectWrapper>\r\n    )\r\n\r\n    const renderPlaceholder = getToggleButtonProps => (\r\n      <SelectWrapper className={className} variant={variant}>\r\n        {this.props.label && (\r\n          <Label variant={variant}>{this.props.label}</Label>\r\n        )}\r\n        <SelectedWrapper variant={variant} isSelected>\r\n          <Selected\r\n            {...getToggleButtonProps()}\r\n            selectedItem={placeHolderLabel}\r\n            variant={variant}\r\n            isSelected\r\n          >\r\n            {toString(placeHolderLabel)}\r\n          </Selected>\r\n          <IconButton\r\n            {...getToggleButtonProps()}\r\n            variant={variant}\r\n            type={\"button\"}\r\n            isSelected\r\n            tabIndex={-1}\r\n          >\r\n            <CaretIcon isExpanded={false} variant={variant} />\r\n          </IconButton>\r\n        </SelectedWrapper>\r\n      </SelectWrapper>\r\n    )\r\n\r\n    return (\r\n      <Select2\r\n        options={items}\r\n        renderSelected={renderSelected}\r\n        renderPlaceholder={renderPlaceholder}\r\n        renderLabel={() => null}\r\n        onChange={onChange}\r\n        downshiftProps={{\r\n          initialSelectedItem\r\n        }}\r\n      >\r\n        {({\r\n          options,\r\n          getItemProps,\r\n          selectedItem,\r\n          highlightedIndex,\r\n          toggleMenu\r\n        }) => (\r\n          <DefaultOptionElementWrapper variant={variant}>\r\n            {options\r\n              .filter(item => (selectedItem ? item : this.filterItem(item)))\r\n              .slice(\r\n                0,\r\n                this.props.maxItems === -1\r\n                  ? this.props.items.length\r\n                  : this.props.maxItems\r\n              )\r\n              .map((item, index) => {\r\n                if (this.props.children) {\r\n                  return this.props.children({\r\n                    item,\r\n                    getItemProps,\r\n                    highlighted: highlightedIndex === index,\r\n                    selected: selectedItem === item,\r\n                    reset: toggleMenu\r\n                  })\r\n                }\r\n                return (\r\n                  <SelectItem\r\n                    variant={variant}\r\n                    key={this.props.itemToKey(item)}\r\n                    isSelected={highlightedIndex === index}\r\n                    {...getItemProps({ item })}\r\n                  >\r\n                    {toString(item)}\r\n                  </SelectItem>\r\n                )\r\n              })}\r\n          </DefaultOptionElementWrapper>\r\n        )}\r\n      </Select2>\r\n    )\r\n  }\r\n}\r\n\r\nconst SelectItem = styled.li`\r\n  list-style: none;\r\n  padding: ${spacing.small} ${spacing.medium};\r\n  background-color: ${p => (p.isSelected ? color.primary : \"transparent\")};\r\n  color: ${p => (p.isSelected ? color.white : color.black)};\r\n  border-bottom: 1px solid ${color.line};\r\n\r\n  &:first-child {\r\n    border-top: 1px solid ${color.line};\r\n  }\r\n`\r\n\r\nexport const DefaultOptionElementWrapper = styled.ul`\r\n  position: absolute;\r\n  max-height: 300px;\r\n  overflow: auto;\r\n  width: 100%;\r\n  cursor: pointer;\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  border: 1px solid ${color.line};\r\n  background-color: ${color.white};\r\n  border-top-width: 0;\r\n  z-index: 10;\r\n\r\n  > *:not(:last-child) {\r\n    border-bottom: 1px solid ${color.line};\r\n  }\r\n  ${applyVariants(themeProps.defaultOptionWrapper)};\r\n`\r\n\r\nexport const SelectWrapper = styled.div`\r\n  position: relative;\r\n  ${applyVariants(themeProps.selectWrapper)};\r\n`\r\n\r\nexport const SelectedWrapper = styled.div`\r\n  position: relative;\r\n\r\n  ${p =>\r\n    !p.combobox &&\r\n    css`\r\n      border: 1px solid ${color.line};\r\n      border-radius: ${borderRadius};\r\n    `};\r\n  ${applyVariants(themeProps.selectedWrapper)};\r\n`\r\nexport const IconButton = styled.button`\r\n  position: absolute;\r\n  right: 3px;\r\n  bottom: 50%;\r\n  width: ${targetSize.small};\r\n  height: ${targetSize.small};\r\n  border: 0;\r\n  padding: 0 ${spacing.tiny};\r\n  text-align: center;\r\n  background-color: transparent;\r\n  fill: ${color.wcag};\r\n  transform: translateY(50%);\r\n  transition: fill 0.2s ease;\r\n\r\n  &:active,\r\n  &:hover,\r\n  &:focus {\r\n    outline: none;\r\n\r\n    svg {\r\n      fill: ${color.primary};\r\n    }\r\n  }\r\n  ${applyVariants(themeProps.iconButton)};\r\n`\r\n\r\nSelect.propTypes = {\r\n  Option: PropTypes.any,\r\n  OptionsWrapper: PropTypes.any,\r\n  Placeholder: PropTypes.any,\r\n  Selected: PropTypes.any,\r\n  children: PropTypes.func,\r\n  className: PropTypes.string,\r\n  combobox: PropTypes.bool,\r\n  filterProp: PropTypes.string,\r\n  itemToKey: PropTypes.any,\r\n  itemToString: PropTypes.func,\r\n  items: PropTypes.array.isRequired,\r\n  label: PropTypes.string,\r\n  mapKey: PropTypes.func,\r\n  mapSelected: PropTypes.func,\r\n  maxItems: PropTypes.number,\r\n  onChange: PropTypes.func,\r\n  placeHolderLabel: PropTypes.any,\r\n  renderSelected: PropTypes.func,\r\n  selectedItem: PropTypes.any,\r\n  variant: PropTypes.string\r\n}\r\n\r\nSelect.defaultProps = {\r\n  Option: SelectOption,\r\n  OptionsWrapper: DefaultOptionElementWrapper,\r\n  Placeholder: Input,\r\n  combobox: false,\r\n  itemToKey: item => item,\r\n  itemToString: item => item,\r\n  maxItems: -1\r\n}\r\n\r\nSelect.themeProps = themeProps\r\nexport default Select\r\n","SelectSimple":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport { multiplyPixelValue } from \"@staccx/math\"\r\nimport Label from \"../Label/Label\"\r\nimport Caret from \"../../Icons/Caret\"\r\nimport {\r\n  commonPropTypes,\r\n  themePropTypes\r\n} from \"../../../constants/themeContants\"\r\nimport {\r\n  applyVariants,\r\n  borderRadius,\r\n  color,\r\n  font,\r\n  spacing,\r\n  targetSize\r\n} from \"../../../theming\"\r\nimport ThemeComponent from \"../../Theme/ThemeComponent\"\r\n\r\nconst tProps = {\r\n  iconComponent: {\r\n    name: \"COMPONENT_SELECT_SIMPLE_ICON\",\r\n    description: \"Icon component\",\r\n    type: themePropTypes.component\r\n  },\r\n  wrapper: {\r\n    name: \"SELECT_SIMPLE_WRAPPER\",\r\n    description: \"Wrapper style\",\r\n    type: themePropTypes.style\r\n  },\r\n  icon: {\r\n    name: \"SELECT_SIMPLE_ICON\",\r\n    description: \"Icon style\",\r\n    type: themePropTypes.style\r\n  },\r\n  select: {\r\n    name: \"SELECT_SIMPLE_SELECT\",\r\n    description: \"Icon style\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\nconst IconComponent = ({ ...props }) => (\r\n  <ThemeComponent tagName={tProps.iconComponent} fallback={Caret} {...props} />\r\n)\r\n\r\nconst SelectSimple = ({\r\n  children,\r\n  label,\r\n  placeholder,\r\n  className,\r\n  id,\r\n  variant,\r\n  ...rest\r\n}) => (\r\n  <SelectWrapper className={className} variant={variant}>\r\n    {label && (\r\n      <Label htmlFor={id} variant={variant}>\r\n        {label}\r\n      </Label>\r\n    )}\r\n    <Select\r\n      id={id}\r\n      defaultValue={placeholder || \"\"}\r\n      variant={variant}\r\n      {...rest}\r\n    >\r\n      {placeholder && (\r\n        <option disabled value={placeholder}>\r\n          {placeholder}\r\n        </option>\r\n      )}\r\n      {children}\r\n    </Select>\r\n    <SelectIcon />\r\n  </SelectWrapper>\r\n)\r\n\r\nconst SelectWrapper = styled.div`\r\n  display: block;\r\n  margin-bottom: 0;\r\n  position: relative;\r\n  ${applyVariants(tProps.wrapper)};\r\n`\r\n\r\nconst SelectIcon = styled(IconComponent)`\r\n  position: absolute;\r\n  right: ${spacing.small};\r\n  bottom: ${p => {\r\n    const value = targetSize.normal()(p)\r\n    return multiplyPixelValue(value, 0.5)\r\n  }};\r\n  width: 12px;\r\n  fill: ${color.gray};\r\n  transform: translateY(50%);\r\n  transition: fill 0.2s ease;\r\n  pointer-events: none;\r\n  ${applyVariants(tProps.icon)};\r\n`\r\n\r\nconst Select = styled.select`\r\n  width: 100%;\r\n  min-height: ${targetSize.normal};\r\n  font-size: ${font.input};\r\n  padding: 10px ${spacing.medium} 10px ${spacing.small};\r\n  box-shadow: none;\r\n  border-radius: ${borderRadius};\r\n  line-height: 1.4;\r\n  border: 1px solid ${color.line};\r\n  background-color: ${color.white};\r\n  -webkit-appearance: none;\r\n  appearance: none;\r\n  cursor: pointer;\r\n\r\n  &:focus,\r\n  &:hover {\r\n    color: ${color.primary};\r\n    border-color: ${color.line};\r\n    outline: none;\r\n\r\n    ~ ${SelectIcon} {\r\n      fill: ${color.primary};\r\n    }\r\n  }\r\n  ${applyVariants(tProps.select)};\r\n`\r\n\r\nSelectSimple.defaultProps = {\r\n  className: \"\",\r\n  placeholder: \"\",\r\n  label: null\r\n}\r\n\r\nSelectSimple.propTypes = {\r\n  label: PropTypes.string,\r\n  children: commonPropTypes.children.isRequired,\r\n  placeholder: PropTypes.string,\r\n  id: PropTypes.string.isRequired,\r\n  className: PropTypes.string\r\n}\r\n\r\nSelectSimple.themeProps = tProps\r\n\r\nexport default SelectSimple\r\n","Slider":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled, { css } from \"styled-components\"\r\nimport { applyVariants, color, fontWeight } from \"../../../../theming\"\r\nimport { themePropTypes } from \"../../../../constants/themeContants\"\r\n\r\nclass Slider extends React.PureComponent {\r\n  constructor(props, context) {\r\n    super(props, context)\r\n\r\n    this.state = {\r\n      percentage: props.value ? props.value / props.max : props.max * 0.5\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this)\r\n  }\r\n\r\n  handleChange(e) {\r\n    const { value } = e.target\r\n    const percentage = value / this.props.max\r\n    this.setState({ percentage })\r\n    this.props.onChange(e)\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      disabled,\r\n      max,\r\n      min,\r\n      name,\r\n      step,\r\n      value,\r\n      variantStyle,\r\n      variant,\r\n      ignoreBase,\r\n      ...restProps\r\n    } = this.props\r\n    return (\r\n      <SliderInput\r\n        percentage={this.state.percentage}\r\n        variant={variant}\r\n        ignoreBase={ignoreBase}\r\n      >\r\n        <input\r\n          type=\"range\"\r\n          name={name}\r\n          defaultValue={value}\r\n          min={min}\r\n          max={max}\r\n          step={step}\r\n          disabled={disabled}\r\n          {...restProps}\r\n          onChange={this.handleChange}\r\n        />\r\n      </SliderInput>\r\n    )\r\n  }\r\n}\r\n\r\nSlider.themeProps = {\r\n  thumb: {\r\n    name: \"SLIDER_THUMB_STYLE\",\r\n    description: \"Thumb style\",\r\n    type: themePropTypes.style\r\n  },\r\n  track: {\r\n    name: \"SLIDER_TRACK_STYLE\",\r\n    description: \"Track style\",\r\n    type: themePropTypes.style\r\n  },\r\n  input: {\r\n    name: \"SLIDER_INPUT\",\r\n    description: \"Input style\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst SliderThumbStyle = css`\r\n  -webkit-appearance: none;\r\n  border: 2px solid ${color.line};\r\n  height: 20px;\r\n  width: 20px;\r\n  transform: translateY(-2px);\r\n  border-radius: 50%;\r\n  background-color: ${color.white};\r\n  cursor: pointer;\r\n  &:hover {\r\n    background-color: ${color.bg};\r\n    border-color: ${color.disabled};\r\n  }\r\n  &:active,\r\n  &:focus {\r\n    border-color: ${color.white};\r\n    background-color: ${color.secondary};\r\n  }\r\n  ${applyVariants(Slider.themeProps.thumb)};\r\n`\r\n\r\nconst SliderHiddenTrackStyle = css`\r\n  width: 100%;\r\n  cursor: pointer;\r\n  background-color: transparent;\r\n  border-color: transparent;\r\n  color: transparent;\r\n`\r\n\r\nconst SliderTrackStyle = css`\r\n  width: 100%;\r\n  height: 9px;\r\n  cursor: pointer;\r\n  border-radius: 4.5px;\r\n  color: transparent;\r\n  background-color: ${color.line};\r\n  ${applyVariants(Slider.themeProps.track)};\r\n`\r\n\r\nconst SliderInput = styled.div`\r\n  position: relative;\r\n  font-weight: ${fontWeight.bold};\r\n\r\n  /* Make the default slider invisible */\r\n  > input[type=\"range\"] {\r\n    -webkit-appearance: none;\r\n    width: 100%;\r\n    background-color: transparent;\r\n    margin: 0;\r\n    background-clip: content-box;\r\n    border-top: 10px solid transparent;\r\n    border-bottom: 10px solid transparent;\r\n    border-radius: 6px;\r\n    -webkit-tap-highlight-color: transparent;\r\n  }\r\n\r\n  > input[type=\"range\"]::-webkit-slider-thumb {\r\n    -webkit-appearance: none;\r\n  }\r\n\r\n  > input[type=\"range\"]::-ms-track {\r\n    ${SliderHiddenTrackStyle};\r\n  }\r\n\r\n  > input[type=\"range\"]::-moz-range-track {\r\n    ${SliderHiddenTrackStyle};\r\n  }\r\n\r\n  > input[type=\"range\"]:focus {\r\n    outline: none;\r\n  }\r\n\r\n  > input[type=\"range\"]:active {\r\n    outline: none;\r\n  }\r\n\r\n  > input[type=\"range\"]:-moz-focusring,\r\n  > input[type=\"range\"]:focusring {\r\n    outline: 1px solid white;\r\n    outline-offset: -1px;\r\n  }\r\n\r\n  /* Style the thumb */\r\n  > input[type=\"range\"]::-webkit-slider-thumb {\r\n    ${SliderThumbStyle};\r\n    margin-top: -3px;\r\n  }\r\n\r\n  > input[type=\"range\"]::-moz-range-thumb {\r\n    ${SliderThumbStyle};\r\n  }\r\n\r\n  > input[type=\"range\"]::-ms-thumb {\r\n    ${SliderThumbStyle};\r\n  }\r\n\r\n  /* Style the track for webkit */\r\n  input[type=\"range\"]::-webkit-slider-runnable-track {\r\n    background: linear-gradient(\r\n        90deg,\r\n        ${color.primary} 0%,\r\n        ${color.primary} ${p => p.percentage * 100}%,\r\n        ${color.line} ${p => p.percentage * 100 + 0.0}%,\r\n        ${color.line} 100%\r\n      )\r\n      0 100% no-repeat content-box;\r\n    ${SliderTrackStyle};\r\n  }\r\n\r\n  input[type=\"range\"]:focus::-webkit-slider-runnable-track {\r\n  }\r\n\r\n  /* Style the track for mozilla */\r\n  input[type=\"range\"]::-moz-range-track {\r\n    ${SliderTrackStyle};\r\n  }\r\n\r\n  input[type=\"range\"]::-moz-range-progress {\r\n    background-color: ${color.primary};\r\n    height: 9px;\r\n    border-radius: 4.5px;\r\n  }\r\n\r\n  /* Style the track for MS */\r\n  input[type=\"range\"]::-ms-track {\r\n    ${SliderTrackStyle};\r\n  }\r\n\r\n  input[type=\"range\"]::-ms-fill-lower {\r\n    background-color: ${color.primary};\r\n  }\r\n\r\n  input[type=\"range\"]:focus::-ms-fill-lower {\r\n    background-color: ${color.white};\r\n  }\r\n\r\n  input[type=\"range\"]::-ms-fill-upper {\r\n    background-color: ${color.white};\r\n  }\r\n\r\n  input[type=\"range\"]:focus::-ms-fill-upper {\r\n    background-color: ${color.white};\r\n  }\r\n\r\n  ${applyVariants(Slider.themeProps.input)};\r\n`\r\n\r\nSlider.defaultProps = {\r\n  disabled: false,\r\n  ignoreBase: null,\r\n  max: 100,\r\n  min: 0,\r\n  step: 1,\r\n  value: undefined\r\n}\r\n\r\nSlider.propTypes = {\r\n  animationTicks: PropTypes.number,\r\n  disabled: PropTypes.bool,\r\n  ignoreBase: PropTypes.bool,\r\n  max: PropTypes.number,\r\n  min: PropTypes.number,\r\n  name: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func,\r\n  step: PropTypes.any,\r\n  variant: PropTypes.string,\r\n  value: PropTypes.any\r\n}\r\n\r\nexport default Slider\r\n","SliderKeyboardInput":"import PropTypes from \"prop-types\"\r\nimport React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { linear } from \"easing-utils\"\r\nimport { inverseLerp, clamp } from \"@staccx/math\"\r\nimport Label from \"../../Label/Label\"\r\nimport Input from \"../../Input/Input\"\r\nimport Slider from \"../Slider/Slider\"\r\nimport { themePropTypes } from \"../../../../constants/themeContants\"\r\nimport {\r\n  applyVariants,\r\n  targetSize,\r\n  fontFamily,\r\n  font,\r\n  color\r\n} from \"../../../../theming\"\r\n\r\nconst removeSpaces = value => value.replace(/\\s/g, \"\")\r\n\r\nclass SliderKeyboardInput extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      isAnimatingIn: false,\r\n      currentValue: 0,\r\n      percentage: 0\r\n    }\r\n    this.handleBlur = this.handleBlur.bind(this)\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.countUp = this.countUp.bind(this)\r\n    this.stopCount = this.stopCount.bind(this)\r\n    this.updateState = this.updateState.bind(this)\r\n    this.tick = 0\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.easingFunction) {\r\n      this.startCount()\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.props.easingFunction) {\r\n      this.stopCount()\r\n    }\r\n  }\r\n\r\n  startCount() {\r\n    if (!this._frameId) {\r\n      this.setState(\r\n        {\r\n          isAnimatingIn: true\r\n        },\r\n        () => {\r\n          this._frameId = window.requestAnimationFrame(this.countUp)\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  countUp() {\r\n    // perform loop work here\r\n    if (this.tick < this.props.animationTicks && this.props.easingFunction) {\r\n      const t = this.props.easingFunction(this.tick / this.props.animationTicks)\r\n      const newValue = this.props.value * t\r\n\r\n      this.updateState(newValue).then(() => {\r\n        this._frameId = window.requestAnimationFrame(this.countUp)\r\n      })\r\n    } else {\r\n      this.updateState(this.props.value, {\r\n        isAnimatingIn: false\r\n      }).then(this.stopCount)\r\n    }\r\n    this.tick++\r\n  }\r\n\r\n  stopCount() {\r\n    window.cancelAnimationFrame(this._frameId)\r\n  }\r\n\r\n  updateState(value, options = {}) {\r\n    return new Promise(resolve => {\r\n      this.setState(\r\n        {\r\n          currentValue: Math.floor(value),\r\n          percentage:\r\n            inverseLerp(\r\n              this.props.min,\r\n              this.props.max,\r\n              clamp(this.props.min, this.props.max, Math.ceil(value))\r\n            ) * 100,\r\n          ...options\r\n        },\r\n        resolve\r\n      )\r\n    })\r\n  }\r\n\r\n  handleChange(event) {\r\n    const value = event.target.value\r\n    this.updateState(parseInt(removeSpaces(value), 10)).then(() => {\r\n      if (this.props.onChange) {\r\n        this.props.onChange(this.state.currentValue)\r\n      }\r\n    })\r\n  }\r\n\r\n  handleBlur(event) {\r\n    const value = event.target.value\r\n    const valueInt = parseInt(removeSpaces(value), 10)\r\n    const parsed = clamp(this.props.min, this.props.max, valueInt)\r\n    this.updateState(parsed).then(() => {\r\n      if (this.props.onBlur) {\r\n        this.props.onBlur(this.state.currentValue)\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      label,\r\n      name,\r\n      min,\r\n      max,\r\n      step,\r\n      mask,\r\n      className,\r\n      ignoreBase,\r\n      variant,\r\n      showLabel\r\n    } = this.props\r\n    const { currentValue, percentage } = this.state\r\n    return (\r\n      <SliderWrapper\r\n        className={className}\r\n        variant={variant}\r\n        ignoreBase={ignoreBase}\r\n      >\r\n        <Label htmlFor={name} variant={variant}>\r\n          {label}\r\n        </Label>\r\n        <SliderInput\r\n          type=\"text\"\r\n          name={`${name}-keyboard`}\r\n          id={`${name}-keyboard`}\r\n          value={currentValue}\r\n          onChange={this.handleChange}\r\n          onBlur={this.handleBlur}\r\n          label={showLabel ? label : null}\r\n          min={min}\r\n          max={max}\r\n          mask={mask || null}\r\n          disabled={this.state.isAnimatingIn}\r\n          variant={variant}\r\n        />\r\n        <Slider\r\n          percentage={percentage}\r\n          value={currentValue}\r\n          name={name}\r\n          id={name}\r\n          step={step}\r\n          min={min}\r\n          max={max}\r\n          onChange={this.handleChange}\r\n          variant={variant}\r\n        />\r\n      </SliderWrapper>\r\n    )\r\n  }\r\n}\r\n\r\nSliderKeyboardInput.themeProps = {\r\n  wrapper: {\r\n    name: \"SLIDER_KEYBOARD_WRAPPER\",\r\n    description: \"Wrapper style\",\r\n    type: themePropTypes.style\r\n  },\r\n  input: {\r\n    name: \"SLIDER_KEYBOARD_INPUT\",\r\n    description: \"Wrapper style\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst SliderWrapper = styled.div`\r\n  font-family: ${fontFamily.body};\r\n  font-size: ${font.input};\r\n  ${applyVariants(SliderKeyboardInput.themeProps.wrapper)};\r\n`\r\n\r\nconst SliderInput = styled(Input)`\r\n  background-color: transparent;\r\n  border: 0;\r\n  min-height: ${targetSize.normal};\r\n  max-width: 100%;\r\n  -moz-appearance: textfield;\r\n  outline: none;\r\n\r\n  &::-webkit-inner-spin-button,\r\n  &::-webkit-outer-spin-button {\r\n    -webkit-appearance: none;\r\n    margin: 0;\r\n  }\r\n\r\n  &:hover,\r\n  &:active,\r\n  &:focus,\r\n  &:-moz-ui-invalid,\r\n  &:invalid {\r\n    outline: none;\r\n    box-shadow: none;\r\n  }\r\n\r\n  &:disabled {\r\n    color: ${color.text};\r\n  }\r\n  ${applyVariants(SliderKeyboardInput.themeProps.input)};\r\n`\r\n\r\nSliderKeyboardInput.defaultProps = {\r\n  animationTicks: 50,\r\n  className: \"\",\r\n  easingFunction: linear,\r\n  mask: null,\r\n  max: 100,\r\n  min: 0,\r\n  onChange: null,\r\n  step: 1,\r\n  value: 0,\r\n  showLabel: false\r\n}\r\n\r\nSliderKeyboardInput.propTypes = {\r\n  animationTicks: PropTypes.number,\r\n  className: PropTypes.string,\r\n  easingFunction: PropTypes.func,\r\n  ignoreBase: PropTypes.bool,\r\n  label: PropTypes.string.isRequired,\r\n  mask: PropTypes.func,\r\n  max: PropTypes.number,\r\n  min: PropTypes.number,\r\n  name: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func,\r\n  onBlur: PropTypes.func,\r\n  step: PropTypes.number,\r\n  variant: PropTypes.string,\r\n  value: PropTypes.number,\r\n  showLabel: PropTypes.bool\r\n}\r\n\r\nexport default SliderKeyboardInput\r\n","Toggle":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport {\r\n  commonPropTypes,\r\n  themePropTypes\r\n} from \"../../../constants/themeContants\"\r\nimport { targetSize, spacing, color, applyVariants } from \"../../../theming\"\r\n\r\nconst Toggle = ({\r\n  children,\r\n  id,\r\n  group,\r\n  disabled,\r\n  onChange,\r\n  className,\r\n  defaultChecked,\r\n  variant,\r\n  ...otherProps\r\n}) => {\r\n  return (\r\n    <ToggleWrapper htmlFor={id} className={className} variant={variant}>\r\n      <ToggleInput\r\n        id={id}\r\n        disabled={disabled}\r\n        type=\"checkbox\"\r\n        name={group}\r\n        onChange={onChange}\r\n        defaultChecked={defaultChecked}\r\n        variant={variant}\r\n        {...otherProps}\r\n      />\r\n      <ToggleElement variant={variant}>\r\n        <span>{children}</span>\r\n      </ToggleElement>\r\n    </ToggleWrapper>\r\n  )\r\n}\r\n\r\nToggle.themeProps = {\r\n  wrapper: {\r\n    name: \"TOGGLE\",\r\n    description: \"Toggle style\",\r\n    type: themePropTypes.style\r\n  },\r\n  toggleElement: {\r\n    name: \"TOGGLE_ELEMENT\",\r\n    description: \"Toggle element style\",\r\n    type: themePropTypes.style\r\n  },\r\n  input: {\r\n    name: \"TOGGLE_INPUT\",\r\n    description: \"Toggle input style\",\r\n    type: themePropTypes.style\r\n  },\r\n  checked: {\r\n    name: \"  TOGGLE_ELEMENT_CHECKED\",\r\n    description: \"Toggle element checked style\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst ToggleWrapper = styled.label`\r\n  min-height: ${targetSize.normal};\r\n  padding-top: ${spacing.tiny};\r\n  padding-bottom: ${spacing.tiny};\r\n  display: block;\r\n  ${applyVariants(Toggle.themeProps.wrapper)};\r\n`\r\n\r\nconst ToggleElement = styled.div`\r\n  background-color: ${color.line};\r\n  border-radius: 2em;\r\n  padding: 2px;\r\n  transition: all 0.4s ease;\r\n  span {\r\n    position: absolute;\r\n    clip: rect(0, 0, 0, 0);\r\n    clip: rect(0 0 0 0);\r\n  }\r\n  &:after {\r\n    border-radius: 50%;\r\n    background: ${color.white};\r\n    transition: all 0.2s ease;\r\n  }\r\n  ${applyVariants(Toggle.themeProps.toggleElement)};\r\n`\r\n\r\nconst ToggleInput = styled.input`\r\n  position: absolute;\r\n  clip: rect(0, 0, 0, 0);\r\n  clip: rect(0 0 0 0);\r\n\r\n  &,\r\n  &:after,\r\n  &:before,\r\n  & *,\r\n  & *:after,\r\n  & *:before,\r\n  & + ${ToggleElement} {\r\n    box-sizing: border-box;\r\n    &::selection {\r\n      background: none;\r\n    }\r\n  }\r\n\r\n  + ${ToggleElement} {\r\n     {\r\n      /* TODO: Burde dette vært flyttet inn i Toggle-element over?*/\r\n    }\r\n    outline: 0;\r\n    display: block;\r\n    width: 4em;\r\n    height: 2em;\r\n    position: relative;\r\n    cursor: pointer;\r\n    user-select: none;\r\n    &:after,\r\n    &:before {\r\n      position: relative;\r\n      display: block;\r\n      content: \"\";\r\n      width: 50%;\r\n      height: 100%;\r\n    }\r\n\r\n    &:after {\r\n      left: 0;\r\n    }\r\n\r\n    &:before {\r\n      display: none;\r\n    }\r\n  }\r\n\r\n  &:checked + ${ToggleElement} {\r\n    background: ${color.green};\r\n    &:after {\r\n      transform: translateX(100%);\r\n    }\r\n    ${applyVariants(Toggle.themeProps.checked)};\r\n  }\r\n  ${applyVariants(Toggle.themeProps.input)};\r\n`\r\n\r\nToggle.propTypes = {\r\n  disabled: PropTypes.bool,\r\n  group: PropTypes.string,\r\n  id: PropTypes.string.isRequired,\r\n  input: PropTypes.any,\r\n  onChange: PropTypes.func,\r\n  className: PropTypes.string,\r\n  defaultChecked: PropTypes.bool,\r\n  children: commonPropTypes.children\r\n}\r\n\r\nToggle.defaultProps = {\r\n  disabled: false,\r\n  input: {},\r\n  onChange: null,\r\n  className: \"\",\r\n  defaultChecked: false,\r\n  children: \"\"\r\n}\r\n\r\nexport default Toggle\r\n","Image":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport { commonPropTypes, themePropTypes } from \"../../constants/themeContants\"\r\nimport { applyVariants } from \"../../theming\"\r\n\r\nconst Image = ({\r\n  src,\r\n  className,\r\n  round,\r\n  variant,\r\n  aspectRatio,\r\n  stretch,\r\n  width,\r\n  srcset,\r\n  ...otherProps\r\n}) => {\r\n  if (aspectRatio) {\r\n    const antecedent = parseInt(aspectRatio.split(\":\")[0], 10)\r\n    const consequent = parseInt(aspectRatio.split(\":\")[1], 10)\r\n    const ratio = consequent / antecedent\r\n\r\n    return (\r\n      <CropContainer\r\n        className={className}\r\n        ratio={ratio}\r\n        variant={variant}\r\n        round={round}\r\n        width={width}\r\n        {...otherProps}\r\n      >\r\n        <CroppedImg\r\n          srcSet={srcset}\r\n          src={src}\r\n          stretch={stretch}\r\n          variant={variant}\r\n        />\r\n      </CropContainer>\r\n    )\r\n  }\r\n  return (\r\n    <Img\r\n      src={src}\r\n      className={className}\r\n      round={round}\r\n      variant={variant}\r\n      {...otherProps}\r\n    />\r\n  )\r\n}\r\n\r\nImage.themeProps = {\r\n  image: {\r\n    name: \"IMAGE\",\r\n    description: \"image style\",\r\n    type: themePropTypes.style\r\n  },\r\n  container: {\r\n    name: \"IMAGE_CONTAINER\",\r\n    description: \"image container style\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nexport const IMAGE = \"IMAGE\"\r\nexport const IMAGE_CONTAINER = \"IMAGE_CONTAINER\"\r\n\r\nexport const Img = styled.img`\r\n  ${p => p.round && \"border-radius: 50%\"};\r\n  ${applyVariants(Image.themeProps.image)};\r\n`\r\n\r\nexport const CroppedImg = styled(Img)`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  max-width: none;\r\n  min-height: 100%;\r\n  min-width: 100%;\r\n`\r\n\r\nexport const CropContainer = styled.div`\r\n  position: relative;\r\n  display: block;\r\n  overflow: hidden;\r\n  padding-bottom: ${p => p.ratio * 100}%;\r\n  min-width: 100px;\r\n  ${p => p.width && \"width: \" + p.width + \"px\"};\r\n  ${p => p.round && \"border-radius: 50%\"};\r\n  ${applyVariants(Image.themeProps.container)};\r\n`\r\n\r\nImage.defaultProps = {\r\n  className: \"\",\r\n  size: \"medium\",\r\n  round: false,\r\n  aspectRatio: \"\"\r\n}\r\n\r\nImage.propTypes = {\r\n  children: commonPropTypes.children,\r\n  className: PropTypes.string,\r\n  size: commonPropTypes.spacing,\r\n  round: PropTypes.bool,\r\n  aspectRatio: PropTypes.string\r\n}\r\n\r\nexport default Image\r\n","Box":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport { applyVariants, spacing } from \"../../../theming\"\r\nimport {\r\n  commonPropTypes,\r\n  themePropTypes\r\n} from \"../../../constants/themeContants\"\r\n\r\nconst Box = ({ children, className, size, ...otherProps }) => (\r\n  <Boxing className={className} size={size} {...otherProps}>\r\n    {children}\r\n  </Boxing>\r\n)\r\n\r\nBox.themeProps = {\r\n  box: {\r\n    name: \"BOX\",\r\n    description: \"Box style\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nexport const Boxing = styled.div`\r\n  ${p => p.size && `padding: ${spacing(p.size)}`};\r\n  ${applyVariants(Box.themeProps.box)};\r\n`\r\n\r\nBox.defaultProps = {\r\n  className: \"\"\r\n}\r\n\r\nBox.propTypes = {\r\n  children: commonPropTypes.children,\r\n  className: PropTypes.string,\r\n  size: commonPropTypes.spacing\r\n}\r\n\r\nexport default Box\r\n","Divider":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport { themePropTypes } from \"../../../constants/themeContants\"\r\nimport { applyVariants, color } from \"../../../theming\"\r\n\r\nconst Divider = ({ level, className, height, ...restProps }) => {\r\n  return <Rule className={className} height={height} {...restProps} />\r\n}\r\n\r\nDivider.themeProps = {\r\n  rule: {\r\n    name: \"divider\",\r\n    description: \"horizontal line style\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\nexport const Rule = styled.hr`\r\n  height: ${p => p.height}px;\r\n  width: 100%;\r\n  min-width: 100px;\r\n  border: none;\r\n  background-color: ${color.line};\r\n  ${applyVariants(Divider.themeProps.rule)};\r\n`\r\n\r\nDivider.defaultProps = {\r\n  className: null,\r\n  height: 1\r\n}\r\n\r\nDivider.propTypes = {\r\n  className: PropTypes.string,\r\n  height: PropTypes.number\r\n}\r\n\r\nexport default Divider\r\n","Flag":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled, { css } from \"styled-components\"\r\nimport {\r\n  commonPropTypes,\r\n  themePropTypes\r\n} from \"../../../constants/themeContants\"\r\nimport { applyVariants, spacing } from \"../../../theming\"\r\n\r\n/**\r\n * The flag object is a design pattern similar to the media object, however it\r\n * utilises `display: table[-cell];` to give us control over the vertical\r\n * alignments of the text and image.\r\n */\r\nconst Flag = ({\r\n  children,\r\n  className,\r\n  img,\r\n  reverse,\r\n  top,\r\n  bottom,\r\n  responsive,\r\n  flush,\r\n  large,\r\n  small,\r\n  tiny,\r\n  ...otherProps\r\n}) => (\r\n  <FlagObject\r\n    className={className}\r\n    reverse={reverse}\r\n    top={top}\r\n    bottom={bottom}\r\n    responsive={responsive}\r\n    flush={flush}\r\n    large={large}\r\n    small={small}\r\n    tiny={tiny}\r\n    {...otherProps}\r\n  >\r\n    <FlagImg>{img}</FlagImg>\r\n    <FlagBody>{children}</FlagBody>\r\n  </FlagObject>\r\n)\r\n\r\nFlag.themeProps = {\r\n  object: {\r\n    name: \"FLAG_OBJECT\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst FlagImg = styled.div`\r\n  margin-right: ${spacing.medium};\r\n  > svg {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst FlagBody = styled.div`\r\n  flex: 1 1 0%;\r\n\r\n  &,\r\n  > :last-child {\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst reverse = css`\r\n  > ${FlagImg} {\r\n    order: 1;\r\n    margin-right: 0;\r\n    margin-left: ${spacing.medium};\r\n  }\r\n`\r\n\r\nconst reverseLarge = css`\r\n  > ${FlagImg} {\r\n    margin-right: 0;\r\n    margin-left: ${spacing.large};\r\n  }\r\n`\r\n\r\nconst reverseSmall = css`\r\n  > ${FlagImg} {\r\n    margin-right: 0;\r\n    margin-left: ${spacing.small};\r\n  }\r\n`\r\n\r\nconst reverseTiny = css`\r\n  > ${FlagImg} {\r\n    margin-right: 0;\r\n    margin-left: ${spacing.tiny};\r\n  }\r\n`\r\n\r\nconst top = css`\r\n  align-items: flex-start;\r\n`\r\n\r\nconst bottom = css`\r\n  align-items: flex-end;\r\n`\r\n\r\nconst flush = css`\r\n  > ${FlagImg} {\r\n    padding-right: 0;\r\n    padding-left: 0;\r\n  }\r\n`\r\n\r\nconst large = css`\r\n  > ${FlagImg} {\r\n    margin-right: ${spacing.large};\r\n  }\r\n  ${props => (props.reverse ? reverseLarge : null)};\r\n`\r\n\r\nconst small = css`\r\n  > ${FlagImg} {\r\n    margin-right: ${spacing.small};\r\n  }\r\n  ${props => (props.reverse ? reverseSmall : null)};\r\n`\r\n\r\nconst tiny = css`\r\n  > ${FlagImg} {\r\n    margin-right: ${spacing.tiny};\r\n  }\r\n  ${props => (props.reverse ? reverseTiny : null)};\r\n`\r\n\r\nconst responsive = css`\r\n  @media screen and (max-width: ${props => props.responsive}px) {\r\n    display: block;\r\n\r\n    > ${FlagImg}, > ${FlagBody} {\r\n      display: block;\r\n      margin: 0;\r\n    }\r\n    > ${FlagImg} {\r\n      width: auto;\r\n      margin-bottom: ${spacing.medium};\r\n    }\r\n\r\n    ${FlagImg} > img {\r\n      max-width: 100%;\r\n    }\r\n  }\r\n`\r\n\r\nconst FlagObject = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  ${props => (props.reverse ? reverse : null)};\r\n  ${props => (props.top ? top : null)};\r\n  ${props => (props.bottom ? bottom : null)};\r\n  ${props => (props.flush ? flush : null)};\r\n  ${props => (props.large ? large : null)};\r\n  ${props => (props.small ? small : null)};\r\n  ${props => (props.tiny ? tiny : null)};\r\n  ${props => (props.responsive > 0 ? responsive : null)};\r\n  ${applyVariants(Flag.themeProps.object)};\r\n`\r\n\r\nFlag.defaultProps = {\r\n  className: \"\",\r\n  reverse: null,\r\n  top: null,\r\n  bottom: null,\r\n  responsive: 0,\r\n  flush: null,\r\n  large: null,\r\n  small: null,\r\n  tiny: null\r\n}\r\n\r\nFlag.propTypes = {\r\n  children: commonPropTypes.children.isRequired,\r\n  img: commonPropTypes.children.isRequired,\r\n  className: PropTypes.string,\r\n  reverse: PropTypes.bool,\r\n  top: PropTypes.bool,\r\n  bottom: PropTypes.bool,\r\n  responsive: PropTypes.number,\r\n  flush: PropTypes.bool,\r\n  large: PropTypes.bool,\r\n  small: PropTypes.bool,\r\n  tiny: PropTypes.bool\r\n}\r\n\r\nexport default Flag\r\n","ItemGroup":"import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport {\r\n  commonPropTypes,\r\n  themePropTypes\r\n} from \"../../../constants/themeContants\"\r\nimport { applyVariants, spacing } from \"../../../theming\"\r\n/**\r\n * The ItemGroup object creates spacing between all its children and wraps the items when there is no room\r\n */\r\nconst ItemGroup = ({ children, spacing, variant, className, ...restProps }) => (\r\n  <Wrap variant={variant} className={className} {...restProps}>\r\n    <ItemGroupElement spacing={spacing} variant={variant}>\r\n      {children}\r\n    </ItemGroupElement>\r\n  </Wrap>\r\n)\r\n\r\nItemGroup.themeProps = {\r\n  wrapper: {\r\n    name: \"ITEM_GROUP_WRAPPER\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  },\r\n  group: {\r\n    name: \"ITEM_GROUP\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\nconst Wrap = styled.div`\r\n  overflow: hidden;\r\n  ${applyVariants(ItemGroup.themeProps.wrapper)};\r\n`\r\n\r\nconst ItemGroupElement = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin: 0 -${p => spacing(p.spacing)} -${p => spacing(p.spacing)};\r\n  & > * {\r\n    margin: 0 ${p => spacing(p.spacing)} ${p => spacing(p.spacing)};\r\n  }\r\n  ${applyVariants(ItemGroup.themeProps.group)};\r\n`\r\n\r\nItemGroup.propTypes = {\r\n  children: commonPropTypes.children.isRequired,\r\n  spacing: commonPropTypes.spacing\r\n}\r\n\r\nItemGroup.defaultProps = {\r\n  spacing: \"tiny\"\r\n}\r\n\r\nexport default ItemGroup\r\n","Layout":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled, { css } from \"styled-components\"\r\nimport { spacing, grid, applyVariants } from \"../../../theming\"\r\nimport {\r\n  commonPropTypes,\r\n  themePropTypes\r\n} from \"../../../constants/themeContants\"\r\n\r\n/**\r\n * The default Layout-Component. Can be used with Both LayoutItem inside as well as other components.\r\n * Is very flexible. You can use some predefined grids with the grid-prop or you can use variants.\r\n * The default instance without props just add vertical spacing between items\r\n *\r\n */\r\nconst Layout = ({\r\n  grid,\r\n  children,\r\n  className,\r\n  variant,\r\n  columnGap,\r\n  rowGap,\r\n  paddingTop,\r\n  paddingBottom,\r\n  ...restProps\r\n}) => (\r\n  <LayoutContainer\r\n    className={className}\r\n    grid={grid}\r\n    variant={variant}\r\n    columnGap={columnGap}\r\n    rowGap={rowGap}\r\n    paddingTop={paddingTop}\r\n    paddingBottom={paddingBottom}\r\n    {...restProps}\r\n  >\r\n    {children}\r\n  </LayoutContainer>\r\n)\r\n\r\nLayout.themeProps = {\r\n  container: {\r\n    name: \"LAYOUT\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst isNotFlush = space => {\r\n  switch (space) {\r\n    case \"flush\":\r\n      return false\r\n    default:\r\n      return true\r\n  }\r\n}\r\n\r\nexport const LayoutContainer = styled.div`\r\n  display: grid;\r\n  ${p =>\r\n    isNotFlush(p.rowGap) &&\r\n    css`\r\n      grid-row-gap: ${spacing(p.rowGap)};\r\n    `};\r\n  ${p =>\r\n    isNotFlush(p.columnGap) &&\r\n    css`\r\n      grid-column-gap: ${spacing(p.columnGap)};\r\n    `};\r\n  ${p =>\r\n    isNotFlush(p.paddingBottom) &&\r\n    css`\r\n      padding-bottom: ${spacing(p.paddingBottom)};\r\n    `};\r\n  ${p =>\r\n    isNotFlush(p.paddingTop) &&\r\n    css`\r\n      padding-top: ${spacing(p.paddingTop)};\r\n    `};\r\n  ${p => p.grid && grid};\r\n  ${applyVariants(Layout.themeProps.container)};\r\n`\r\n\r\nLayout.defaultProps = {\r\n  className: \"\",\r\n  grid: null,\r\n  columnGap: \"medium\",\r\n  rowGap: \"medium\",\r\n  paddingBottom: \"flush\",\r\n  paddingTop: \"flush\"\r\n}\r\n\r\nLayout.propTypes = {\r\n  children: commonPropTypes.children.isRequired,\r\n  className: PropTypes.string,\r\n  grid: PropTypes.string,\r\n  columnGap: PropTypes.string,\r\n  rowGap: PropTypes.string,\r\n  paddingBottom: PropTypes.string,\r\n  paddingTop: PropTypes.string\r\n}\r\n\r\nexport default Layout\r\n","Pack":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport { themePropTypes } from \"../../../constants/themeContants\"\r\nimport { applyVariants } from \"../../../theming\"\r\n\r\n/**\r\n * The pack object simply causes any number of elements pack up horizontally to automatically fill an equal, fluid width of their parent.\r\n */\r\nconst Pack = ({ children, className, bottom, middle, noWrap, justify }) => (\r\n  <PackUl\r\n    className={className}\r\n    bottom={bottom}\r\n    middle={middle}\r\n    noWrap={noWrap}\r\n    justify={justify}\r\n  >\r\n    {children}\r\n  </PackUl>\r\n)\r\n\r\nPack.themeProps = {\r\n  list: {\r\n    name: \"PACK\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst position = (bottom, middle) => {\r\n  if (bottom === true && middle === true)\r\n    console.warn(\"Pack cannot be middle and bottom at the same time\")\r\n  else if (bottom === true) return \"flex-end\"\r\n  else if (middle === true) return \"center\"\r\n}\r\n\r\nexport const PACK = \"PACK\"\r\nconst PackUl = styled.ul`\r\n  width: 100%;\r\n  margin-left: 0;\r\n  display: flex;\r\n  justify-content: ${p => p.justify};\r\n  align-items: ${p => position(p.bottom, p.middle)};\r\n  flex-wrap: ${p => !p.noWrap && \"wrap\"};\r\n  ${applyVariants(Pack.themeProps.list)};\r\n`\r\n\r\nPack.defaultProps = {\r\n  className: \"\",\r\n  bottom: false,\r\n  middle: false,\r\n  noWrap: false,\r\n  justify: \"space-between\"\r\n}\r\n\r\nPack.propTypes = {\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.element),\r\n    PropTypes.element\r\n  ]).isRequired,\r\n  className: PropTypes.string,\r\n  bottom: PropTypes.bool,\r\n  middle: PropTypes.bool,\r\n  noWrap: PropTypes.bool,\r\n  justify: PropTypes.string\r\n}\r\n\r\nexport default Pack\r\n","Wrapper":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled, { css } from \"styled-components\"\r\nimport {\r\n  commonPropTypes,\r\n  themePropTypes\r\n} from \"../../../constants/themeContants\"\r\nimport { spacing, wrapper, applyVariants } from \"../../../theming\"\r\n\r\n/**\r\n * A Wrapper components that centers content and add spacing on the sides\r\n */\r\nconst Wrapper = ({\r\n  children,\r\n  className,\r\n  size,\r\n  breakout,\r\n  variant,\r\n  ...otherProps\r\n}) => (\r\n  <Wrap\r\n    breakout={breakout}\r\n    className={className}\r\n    size={size}\r\n    variant={variant}\r\n    {...otherProps}\r\n  >\r\n    {children}\r\n  </Wrap>\r\n)\r\n\r\nWrapper.themeProps = {\r\n  wrapper: {\r\n    name: \"WRAPPER\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\nconst Wrap = styled.div`\r\n  width: 100%;\r\n  max-width: ${p => (p.size === \"full\" ? \"none\" : wrapper(p.size))};\r\n  margin: 0 auto;\r\n  padding-left: ${spacing.medium};\r\n  padding-right: ${spacing.medium};\r\n\r\n  & & {\r\n    padding-left: 0;\r\n    padding-right: 0;\r\n  }\r\n\r\n  ${p =>\r\n    p.breakout &&\r\n    css`\r\n      @media (max-width: ${wrapper.breakout}) {\r\n        padding-left: 0;\r\n        padding-right: 0;\r\n      }\r\n    `};\r\n  ${applyVariants(Wrapper.themeProps.wrapper)};\r\n`\r\n\r\nWrapper.defaultProps = {\r\n  className: \"\",\r\n  size: \"large\",\r\n  breakout: false\r\n}\r\n\r\nWrapper.propTypes = {\r\n  children: commonPropTypes.children,\r\n  className: PropTypes.string,\r\n  size: PropTypes.string,\r\n  breakout: PropTypes.bool\r\n}\r\n\r\nexport default Wrapper\r\n","ExpandListItem":"import React, { Component } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport { BounceIn } from \"@staccx/animations\"\r\nimport Caret from \"../../Icons/Caret\"\r\nimport {\r\n  commonPropTypes,\r\n  themePropTypes\r\n} from \"../../../constants/themeContants\"\r\nimport { spacing, font, color, applyVariants } from \"../../../theming\"\r\nimport ThemeComponent from \"../../Theme/ThemeComponent\"\r\n\r\nconst ExpandButton = ({ title, isExpanded, ...props }) => (\r\n  <ExpandBtn isExpanded={isExpanded} {...props}>\r\n    {title} <ExpandIcon isExpanded={isExpanded} />\r\n  </ExpandBtn>\r\n)\r\n\r\nconst tProps = {\r\n  listItemButtonComponent: {\r\n    name: \"COMPONENT_EXPAND_LIST_ITEM_BTN\",\r\n    description: \"\",\r\n    type: themePropTypes.component\r\n  },\r\n  listItem: {\r\n    name: \"EXPAND_LIST_ITEM\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  },\r\n  listIcon: {\r\n    name: \"EXPAND_LIST_ICON\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  },\r\n  listButton: {\r\n    name: \"EXPAND_LIST_BUTTON\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  },\r\n  expandedItem: {\r\n    name: \"EXPAND_LIST_EXPANDED_ITEM\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  },\r\n  expandListIconComponent: {\r\n    name: \"COMPONENT_EXPAND_LIST_ICON\",\r\n    description: \"\",\r\n    type: themePropTypes.component\r\n  }\r\n}\r\n\r\nconst BtnComponent = ({ ...props }) => (\r\n  <ThemeComponent\r\n    tagName={tProps.listItemButtonComponent}\r\n    fallback={ExpandButton}\r\n    {...props}\r\n  />\r\n)\r\nclass ExpandListItem extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.state = {\r\n      isExpanded: this.props.expanded\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.expanded !== undefined) {\r\n      this.setState({ isExpanded: nextProps.expanded })\r\n    }\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({\r\n      isExpanded: !this.state.isExpanded\r\n    })\r\n    if (this.props.onClick) {\r\n      this.props.onClick(event)\r\n    }\r\n  }\r\n  render() {\r\n    const {\r\n      title,\r\n      children,\r\n      className,\r\n      flush,\r\n      onClick,\r\n      variant,\r\n      ...otherProps\r\n    } = this.props\r\n    const { isExpanded } = this.state\r\n    return (\r\n      <ExpandItem\r\n        className={className}\r\n        variant={variant}\r\n        isExpanded={isExpanded}\r\n        {...otherProps}\r\n      >\r\n        <BtnComponent\r\n          {...otherProps}\r\n          title={title}\r\n          isExpanded={isExpanded}\r\n          onClick={this.handleChange}\r\n          aria-expanded={isExpanded}\r\n          aria-controls={title}\r\n          id={title + \"2\"}\r\n          variant={variant}\r\n        />\r\n        {isExpanded && (\r\n          <ExpandedItem\r\n            flush={flush}\r\n            id={title}\r\n            aria-labelledby={title + \"2\"}\r\n            variant={variant}\r\n            isExpanded={isExpanded}\r\n          >\r\n            {children}\r\n          </ExpandedItem>\r\n        )}\r\n      </ExpandItem>\r\n    )\r\n  }\r\n}\r\n\r\nconst ExpandItem = styled.li`\r\n  border-bottom: 1px solid ${color.line};\r\n  position: relative;\r\n\r\n  &:last-child {\r\n    border-bottom-width: 0;\r\n  }\r\n  ${applyVariants(tProps.listItem)};\r\n`\r\n\r\nconst IconComponent = ({ ...props }) => (\r\n  <ThemeComponent\r\n    tagName={tProps.expandListIconComponent}\r\n    fallback={Caret}\r\n    {...props}\r\n  />\r\n)\r\nconst ExpandIcon = styled(IconComponent)`\r\n  position: absolute;\r\n  right: ${spacing.small};\r\n  fill: ${color.wcag};\r\n  transition: transform 0.3s ease-out;\r\n  transform: ${p => (p.isExpanded ? \"rotate(180deg)\" : \"rotate(0)\")};\r\n  ${applyVariants(tProps.listIcon)};\r\n`\r\n\r\nconst ExpandBtn = styled.button`\r\n  background: transparent;\r\n  border-width: 0;\r\n  color: ${color.text};\r\n  font-size: ${font.base};\r\n  font-weight: ${p => (p.isExpanded ? \"bold\" : \"normal\")};\r\n  cursor: pointer;\r\n  padding: ${spacing.small} ${spacing.large} ${spacing.small} ${spacing.medium};\r\n  width: 100%;\r\n  text-align: left;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    color: ${color.black};\r\n    outline: none;\r\n\r\n    ${ExpandIcon} {\r\n      fill: ${color.primary};\r\n    }\r\n  }\r\n  ${applyVariants(tProps.listButton)};\r\n`\r\n\r\nconst ExpandedItem = styled.div`\r\n  opacity: 0;\r\n  animation: 0.4s ${BounceIn} 0.05s ease-out forwards 1;\r\n  padding: ${p => (p.flush ? 0 : spacing.small)}\r\n    ${p => (p.flush ? 0 : spacing.medium)}\r\n    ${p => (p.flush ? 0 : spacing.medium)};\r\n  max-width: ${p => (p.flush ? \"auto\" : \"540px\")};\r\n  margin: auto;\r\n  line-height: 1.8;\r\n  ${applyVariants(tProps.expandedItem)};\r\n`\r\n\r\nExpandListItem.defaultProps = {\r\n  expanded: false,\r\n  className: \"\",\r\n  flush: false\r\n}\r\n\r\nExpandListItem.propTypes = {\r\n  children: commonPropTypes.children.isRequired,\r\n  title: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.element,\r\n    PropTypes.array\r\n  ]).isRequired,\r\n  className: PropTypes.string,\r\n  expanded: PropTypes.bool,\r\n  flush: PropTypes.bool\r\n}\r\n\r\nExpandListItem.themeProps = tProps\r\n\r\nexport default ExpandListItem\r\n","InlineListItem":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport { themePropTypes } from \"../../../constants/themeContants\"\r\nimport { applyVariants } from \"../../../theming\"\r\n\r\nconst InlineListItem = ({ className, children, ...rest }) => (\r\n  <ListItem className={className} {...rest}>\r\n    {children}\r\n  </ListItem>\r\n)\r\n\r\nInlineListItem.themeProps = {\r\n  listItem: {\r\n    name: \"INLINE_LIST_ITEM\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst ListItem = styled.li`\r\n  display: inline-block;\r\n  ${applyVariants(InlineListItem.themeProps.listItem)};\r\n`\r\n\r\nInlineListItem.defaultProps = {\r\n  className: \"\"\r\n}\r\n\r\nInlineListItem.propTypes = {\r\n  children: PropTypes.any.isRequired,\r\n  className: PropTypes.string\r\n}\r\n\r\nexport default InlineListItem\r\n","LinkListItem":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled, { css } from \"styled-components\"\r\nimport CaretRight from \"../../Icons/CaretRight\"\r\nimport { themePropTypes } from \"../../../constants/themeContants\"\r\nimport {\r\n  spacing,\r\n  fontWeight,\r\n  fontFamily,\r\n  font,\r\n  color,\r\n  applyVariants\r\n} from \"../../../theming\"\r\nimport ThemeComponent from \"../../Theme/ThemeComponent\"\r\n\r\nconst themeProps = {\r\n  iconComponent: {\r\n    name: \"COMPONENT_LINK_LIST_ITEM_ICON\",\r\n    description: \"\",\r\n    type: themePropTypes.component\r\n  },\r\n  icon: {\r\n    name: \"LINK_LIST_ITEM_CARET\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  },\r\n  listItem: {\r\n    name: \"LINK_LIST_ITEM\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  },\r\n  itemButton: {\r\n    name: \"LINK_LIST_ITEM_BUTTON_STYLE\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  },\r\n  link: {\r\n    name: \"LINK_LIST_ITEM_BUTTON\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  },\r\n  hover: {\r\n    name: \"LINK_LIST_ITEM_BUTTON_HOVER_ICON\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst IconComponent = ({ ...props }) => (\r\n  <ThemeComponent\r\n    tagName={themeProps.iconComponent}\r\n    fallback={CaretRight}\r\n    {...props}\r\n  />\r\n)\r\n\r\nconst LinkListItem = ({ className, children, onClick, to }) => (\r\n  <ListItem className={className}>\r\n    <Button onClick={onClick && onClick} href={to}>\r\n      {children} <Cursor />\r\n    </Button>\r\n  </ListItem>\r\n)\r\n\r\nLinkListItem.defaultProps = {\r\n  className: \"\"\r\n}\r\n\r\nLinkListItem.propTypes = {\r\n  to: PropTypes.string.isRequired,\r\n  children: PropTypes.any.isRequired,\r\n  className: PropTypes.string,\r\n  onClick: PropTypes.func\r\n}\r\n\r\nLinkListItem.themeProps = themeProps\r\n\r\nconst Cursor = styled(IconComponent)`\r\n  fill: ${color.wcag};\r\n  position: absolute;\r\n  right: ${spacing.small};\r\n  ${applyVariants(themeProps.icon)};\r\n`\r\n\r\nconst ListItem = styled.li`\r\n  list-style: none;\r\n  border-bottom: 1px solid ${color.line};\r\n  position: relative;\r\n  &:last-child {\r\n    border-bottom: none;\r\n  }\r\n  ${applyVariants(themeProps.listItem)};\r\n`\r\n\r\nconst ButtonStyle = css`\r\n  text-decoration: none;\r\n  color: black;\r\n  font-size: ${font.base};\r\n  font-family: ${fontFamily.body()};\r\n  padding: ${spacing.small} ${spacing.large} ${spacing.small} ${spacing.medium};\r\n  display: block;\r\n  font-weight: ${fontWeight.normal};\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  cursor: pointer;\r\n  ${applyVariants(themeProps.itemButton)};\r\n`\r\n\r\nconst Button = styled.a`\r\n  ${ButtonStyle};\r\n  &:hover,\r\n  &:focus {\r\n    ${Cursor} {\r\n      fill: ${color.primary};\r\n      ${applyVariants(themeProps.hover)};\r\n    }\r\n  }\r\n  ${applyVariants(themeProps.link)};\r\n`\r\n\r\nexport default LinkListItem\r\n","SplitListItem":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport {\r\n  commonPropTypes,\r\n  themePropTypes\r\n} from \"../../../constants/themeContants\"\r\nimport {\r\n  spacing,\r\n  fontFamily,\r\n  font,\r\n  color,\r\n  applyVariants\r\n} from \"../../../theming\"\r\n\r\nconst SplitListItem = ({ children, className, ...restProps }) => {\r\n  if (React.Children.count(children) > 2) {\r\n    console.warn(\r\n      \"SplitListItem exceeded max children: Can only contain 2 children. Others will be omitted.\"\r\n    )\r\n  }\r\n  return (\r\n    <ListItem className={className} {...restProps}>\r\n      {React.Children.map(children, (child, index) => {\r\n        return index <= 1 ? <span>{child}</span> : null\r\n      })}\r\n    </ListItem>\r\n  )\r\n}\r\n\r\nSplitListItem.themeProps = {\r\n  listItem: {\r\n    name: \"split_list\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst ListItem = styled.li`\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  list-style: none;\r\n  border-bottom: 1px solid ${color.line};\r\n  padding: ${spacing.tiny} ${spacing.medium};\r\n  font-size: ${font.base};\r\n  font-family: ${fontFamily.body()};\r\n\r\n  &:last-child {\r\n    border-bottom: none;\r\n  }\r\n  ${applyVariants(SplitListItem.themeProps.listItem)};\r\n`\r\n\r\nSplitListItem.defaultProps = {\r\n  className: \"\"\r\n}\r\n\r\nSplitListItem.propTypes = {\r\n  children: commonPropTypes.children.isRequired,\r\n  className: PropTypes.string\r\n}\r\n\r\nexport default SplitListItem\r\n","Logo":"import PropTypes from \"prop-types\"\r\nimport React from \"react\"\r\n\r\nconst Logo = ({ brand, height, width, className }) => (\r\n  <img\r\n    height={height}\r\n    width={width}\r\n    src={`https://api.logos.stacctest.com/${brand}`}\r\n    alt={brand}\r\n    className={className}\r\n  />\r\n)\r\n\r\nexport default Logo\r\n\r\nLogo.propTypes = {\r\n  brand: PropTypes.string.isRequired,\r\n  height: PropTypes.number,\r\n  width: PropTypes.number\r\n}\r\n\r\nLogo.defaultProps = {\r\n  height: 48\r\n}\r\n","Modal":"import React, { Component } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport hideVisually from \"../../theming/styles/hideVisually\"\r\nimport IconClose from \"../Icons/Close\"\r\nimport { FadeIn } from \"@staccx/animations\"\r\nimport { commonPropTypes, themePropTypes } from \"../../constants/themeContants\"\r\nimport {\r\n  spacing,\r\n  color,\r\n  wrapper,\r\n  applyVariants,\r\n  borderRadius\r\n} from \"../../theming\"\r\nimport ThemeComponent from \"../Theme/ThemeComponent\"\r\n\r\nclass Modal extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.escFunction = this.escFunction.bind(this)\r\n    this.state = {\r\n      isOpen: this.props.isOpen\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.isOpen !== this.state.isOpen) {\r\n      this.setState({ isOpen: nextProps.isOpen })\r\n    }\r\n  }\r\n\r\n  escFunction(event) {\r\n    if (event.keyCode === 27) {\r\n      if (this.props.onClose) {\r\n        this.props.onClose(event)\r\n      }\r\n      this.setState({\r\n        isOpen: false\r\n      })\r\n    }\r\n  }\r\n\r\n  handleChange(event) {\r\n    if (this.props.onClose) {\r\n      this.props.onClose(event)\r\n    }\r\n    // TODO: Make controllable/uncontrollable toggle.\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    })\r\n  }\r\n\r\n  fixOverflow(event) {\r\n    if (this.state.isOpen) {\r\n      document.documentElement.style.overflow = \"hidden\"\r\n    } else {\r\n      document.documentElement.style.overflow = \"\"\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"keydown\", this.escFunction, false)\r\n  }\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"keydown\", this.escFunction, false)\r\n  }\r\n\r\n  render() {\r\n    const { children, className, variant, ...otherProps } = this.props\r\n    const { isOpen } = this.state\r\n    this.fixOverflow()\r\n    if (isOpen) {\r\n      return (\r\n        <React.Fragment>\r\n          <ModalItem\r\n            className={className}\r\n            {...otherProps}\r\n            role=\"dialog\"\r\n            tabIndex=\"0\"\r\n            open=\"open\"\r\n            aria-labelledby=\"modal\"\r\n            variant={variant}\r\n          >\r\n            <ModalContent\r\n              role=\"document\"\r\n              tabIndex=\"0\"\r\n              id=\"modal\"\r\n              variant={variant}\r\n            >\r\n              <Close\r\n                type=\"button\"\r\n                id=\"modal-close\"\r\n                aria-label=\"Close (Press escape to close)\"\r\n                onClick={this.handleChange}\r\n              >\r\n                <span>Close</span>\r\n                <Icon />\r\n              </Close>\r\n              {children}\r\n            </ModalContent>\r\n          </ModalItem>\r\n          <ModalBackdrop onClick={this.handleChange} variant={variant} />\r\n        </React.Fragment>\r\n      )\r\n    }\r\n    return null\r\n  }\r\n}\r\n\r\nModal.themeProps = {\r\n  dialog: {\r\n    name: \"modal_item\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  },\r\n  content: {\r\n    name: \"modal_content\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  },\r\n  close: {\r\n    name: \"modal_close\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  },\r\n  backdrop: {\r\n    name: \"modal_backdrop\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  },\r\n  closeIcon: {\r\n    name: \"COMPONENT_MODAL_CLOSE_ICON\",\r\n    description: \"\",\r\n    type: themePropTypes.component\r\n  }\r\n}\r\nconst ModalItem = styled.dialog`\r\n  border-width: 0;\r\n  height: 100%;\r\n  width: 100%;\r\n  overflow: auto;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 9999;\r\n  display: grid;\r\n  grid-template-columns: 24px 1fr 1fr 24px;\r\n  grid-gap: 12px;\r\n  grid-template-areas:\r\n    \". . . .\"\r\n    \". a a .\"\r\n    \". a a .\"\r\n    \". . . .\";\r\n  background: transparent;\r\n  padding: ${spacing.large} ${spacing.small} ${spacing.small} ${spacing.small};\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n  ${applyVariants(Modal.themeProps.dialog)};\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  background: white;\r\n  border-radius: ${borderRadius};\r\n  grid-area: a;\r\n  align-self: center;\r\n  justify-self: center;\r\n  padding: ${spacing.large} ${spacing.medium} ${spacing.medium}\r\n    ${spacing.medium};\r\n  max-width: ${wrapper.medium};\r\n  min-width: 296px;\r\n  width: 100%;\r\n  overflow-y: auto;\r\n  position: relative;\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n  ${applyVariants(Modal.themeProps.content)};\r\n`\r\n\r\nconst Close = styled.button`\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  z-index: 9999;\r\n  background: transparent;\r\n  border-width: 0;\r\n  fill: ${color.primary};\r\n  padding: ${spacing.small};\r\n  cursor: pointer;\r\n  &:focus,\r\n  &:hover {\r\n    outline: none;\r\n    fill: ${color.primary};\r\n  }\r\n  span {\r\n    ${hideVisually};\r\n  }\r\n  ${applyVariants(Modal.themeProps.close)};\r\n`\r\n\r\nconst ModalBackdrop = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: 999;\r\n  background: rgba(0, 0, 0, 0.8);\r\n  opacity: 0;\r\n  animation: 0.2s ${FadeIn} ease-out forwards 1;\r\n  ${applyVariants(Modal.themeProps.backdrop)};\r\n`\r\n\r\nconst IconComponent = ({ ...props }) => (\r\n  <ThemeComponent\r\n    tagName={Modal.themeProps.closeIcon}\r\n    fallback={IconClose}\r\n    {...props}\r\n  />\r\n)\r\n\r\nconst Icon = styled(IconComponent)``\r\n\r\nModal.defaultProps = {\r\n  isOpen: false,\r\n  className: \"\"\r\n}\r\n\r\nModal.propTypes = {\r\n  children: commonPropTypes.children.isRequired,\r\n  className: PropTypes.string,\r\n  isOpen: PropTypes.bool,\r\n  onClose: PropTypes.func\r\n}\r\n\r\nexport default Modal\r\n","NewBadge":"import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport PropTypes from \"prop-types\"\r\nimport fontSmoothing from \"../../theming/styles/fontsmoothing\"\r\nimport { color, fontWeight, applyVariants } from \"../../theming\"\r\nimport { commonPropTypes, themePropTypes } from \"../../constants/themeContants\"\r\n\r\nconst NewBadge = ({ number, children, variant }) => (\r\n  <NewBadgeWrapper variant={variant}>\r\n    {children}\r\n    {number > 0 && (\r\n      <Badge number={number} variant={variant}>\r\n        <span>{number}</span>\r\n      </Badge>\r\n    )}\r\n  </NewBadgeWrapper>\r\n)\r\n\r\nNewBadge.themeProps = {\r\n  wrapper: {\r\n    name: \"NEW_BADGE_WRAPPER\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  },\r\n  badge: {\r\n    name: \"NEW_BADGE_BADGE\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst NewBadgeWrapper = styled.div`\r\n  position: relative;\r\n  display: inline-block;\r\n  ${applyVariants(NewBadge.themeProps.wrapper)};\r\n`\r\n\r\nconst Badge = styled.span`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 20px;\r\n  height: 20px;\r\n  line-height: 1;\r\n  background: ${color.warning};\r\n  border-radius: 50%;\r\n  text-align: center;\r\n  color: ${color.white};\r\n  font-size: ${p => (p.number < 99 ? \"12px\" : \"10px\")};\r\n  font-weight: ${fontWeight.bold};\r\n  right: -12px;\r\n  bottom: -12px;\r\n  position: absolute;\r\n  ${fontSmoothing};\r\n  ${applyVariants(NewBadge.themeProps.badge)};\r\n`\r\n\r\nNewBadge.propTypes = {\r\n  number: PropTypes.number.isRequired,\r\n  children: commonPropTypes.children\r\n}\r\n\r\nexport default NewBadge\r\n","Heading":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled, { css } from \"styled-components\"\r\nimport { font, fontFamily, applyVariants } from \"../../../theming\"\r\nimport {\r\n  commonPropTypes,\r\n  themePropTypes\r\n} from \"../../../constants/themeContants\"\r\n\r\nconst Heading = ({ level, children, className, ...restProps }) => {\r\n  switch (level) {\r\n    case \"h1\":\r\n    case \"H1\":\r\n    case \"1\":\r\n    case 1:\r\n      return (\r\n        <HeadingH1 level={1} className={className} {...restProps}>\r\n          {children}\r\n        </HeadingH1>\r\n      )\r\n\r\n    case \"h2\":\r\n    case \"H2\":\r\n    case \"2\":\r\n    case 2:\r\n      return (\r\n        <HeadingH2 level={2} className={className} {...restProps}>\r\n          {children}\r\n        </HeadingH2>\r\n      )\r\n\r\n    case \"h3\":\r\n    case \"H3\":\r\n    case \"3\":\r\n    case 3:\r\n      return (\r\n        <HeadingH3 level={3} className={className} {...restProps}>\r\n          {children}\r\n        </HeadingH3>\r\n      )\r\n\r\n    case \"h4\":\r\n    case \"H4\":\r\n    case \"4\":\r\n    case 4:\r\n      return (\r\n        <HeadingH4 level={4} className={className} {...restProps}>\r\n          {children}\r\n        </HeadingH4>\r\n      )\r\n\r\n    case \"h5\":\r\n    case \"H5\":\r\n    case \"5\":\r\n    case 5:\r\n      return (\r\n        <HeadingH5 level={5} className={className} {...restProps}>\r\n          {children}\r\n        </HeadingH5>\r\n      )\r\n\r\n    case \"h6\":\r\n    case \"H6\":\r\n    case \"6\":\r\n    case 6:\r\n      return (\r\n        <HeadingH6 level={6} className={className} {...restProps}>\r\n          {children}\r\n        </HeadingH6>\r\n      )\r\n\r\n    default:\r\n      return (\r\n        <HeadingH1 level={1} className={className} {...restProps}>\r\n          {children}\r\n        </HeadingH1>\r\n      ) // 👈 we always have to return something\r\n  }\r\n}\r\n\r\nHeading.themeProps = {\r\n  heading: {\r\n    name: \"heading\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\nexport const HeadingsStyle = css`\r\n  font-family: ${fontFamily.heading};\r\n  ${applyVariants(Heading.themeProps.heading)};\r\n`\r\n\r\nconst HeadingH1 = styled.h1`\r\n  font-size: ${font.h1};\r\n  ${HeadingsStyle};\r\n`\r\n\r\nconst HeadingH2 = styled.h2`\r\n  font-size: ${font.h2};\r\n  ${HeadingsStyle};\r\n`\r\n\r\nconst HeadingH3 = styled.h3`\r\n  font-size: ${font.h3};\r\n  ${HeadingsStyle};\r\n`\r\n\r\nconst HeadingH4 = styled.h4`\r\n  font-size: ${font.h4};\r\n  ${HeadingsStyle};\r\n`\r\n\r\nconst HeadingH5 = styled.h5`\r\n  font-size: ${font.h5};\r\n  ${HeadingsStyle};\r\n`\r\n\r\nconst HeadingH6 = styled.h6`\r\n  font-size: ${font.h6};\r\n  ${HeadingsStyle};\r\n`\r\n\r\nHeading.defaultProps = {\r\n  level: \"h1\",\r\n  className: null\r\n}\r\n\r\nHeading.propTypes = {\r\n  children: commonPropTypes.children.isRequired,\r\n  level: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  className: PropTypes.string\r\n}\r\n\r\nexport default Heading\r\n","Paragraph":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport {\r\n  commonPropTypes,\r\n  themePropTypes\r\n} from \"../../../constants/themeContants\"\r\nimport { fontFamily, font, applyVariants } from \"../../../theming\"\r\n\r\nconst Paragraph = ({ children, className, ...restProps }) => {\r\n  return (\r\n    <P className={className} {...restProps}>\r\n      {children}\r\n    </P>\r\n  )\r\n}\r\n\r\nParagraph.themeProps = {\r\n  paragraph: {\r\n    name: \"paragraph\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nexport const P = styled.p`\r\n  font-family: ${fontFamily.body};\r\n  line-height: ${font.lineHeight};\r\n  ${applyVariants(Paragraph.themeProps.paragraph)};\r\n`\r\n\r\nParagraph.defaultProps = {\r\n  className: null\r\n}\r\n\r\nParagraph.propTypes = {\r\n  children: commonPropTypes.children.isRequired,\r\n  className: PropTypes.string\r\n}\r\n\r\nexport default Paragraph\r\n","Tag":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport {\r\n  themePropTypes,\r\n  commonPropTypes\r\n} from \"../../../constants/themeContants\"\r\nimport {\r\n  applyVariants,\r\n  font,\r\n  color,\r\n  spacing,\r\n  targetSize\r\n} from \"../../../theming\"\r\n\r\nconst Tag = ({ children, className, variant, ...rest }) => (\r\n  <TagWrapper className={className} variant={variant} {...rest}>\r\n    {children}\r\n  </TagWrapper>\r\n)\r\n\r\nTag.themeProps = {\r\n  tag: {\r\n    name: \"tag\",\r\n    description: \"A span with padding around it\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nconst TagWrapper = styled.span`\r\n  display: inline-block;\r\n  font-size: ${font.tiny};\r\n  text-align: center;\r\n  padding: calc(${spacing.tiny} / 2) calc(${spacing.medium} / 1.5);\r\n  border-radius: ${targetSize.normal};\r\n  background-color: ${color.subtleHover};\r\n  color: ${color.primary};\r\n  min-height: ${spacing.medium};\r\n  ${applyVariants(Tag.themeProps.tag)};\r\n`\r\n\r\nTag.defaultProps = {\r\n  className: null\r\n}\r\n\r\nTag.propTypes = {\r\n  children: commonPropTypes.children.isRequired,\r\n  className: PropTypes.string,\r\n  variant: PropTypes.string\r\n}\r\n\r\nexport default Tag\r\n","Text":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport styled from \"styled-components\"\r\nimport {\r\n  commonPropTypes,\r\n  themePropTypes\r\n} from \"../../../constants/themeContants\"\r\nimport { applyVariants } from \"../../../theming\"\r\n\r\nconst Text = ({ level, children, className, ...restProps }) => {\r\n  return (\r\n    <Span className={className} {...restProps}>\r\n      {children}\r\n    </Span>\r\n  )\r\n}\r\n\r\nText.themeProps = {\r\n  text: {\r\n    name: \"text\",\r\n    description: \"\",\r\n    type: themePropTypes.style\r\n  }\r\n}\r\n\r\nexport const TEXT = \"text\"\r\n\r\nexport const Span = styled.span`\r\n  ${applyVariants(Text.themeProps.text)};\r\n`\r\n\r\nText.defaultProps = {\r\n  className: null\r\n}\r\n\r\nText.propTypes = {\r\n  children: commonPropTypes.children.isRequired,\r\n  className: PropTypes.string\r\n}\r\n\r\nexport default Text\r\n","CopyToClipboard":"import PropTypes from \"prop-types\"\r\nimport copy from \"copy-to-clipboard\"\r\nimport React from \"react\"\r\n\r\nclass CopyToClipboard extends React.PureComponent {\r\n  render() {\r\n    return this.props.children({ copy, ...this.props })\r\n  }\r\n}\r\n\r\nCopyToClipboard.propTypes = {\r\n  children: PropTypes.func\r\n}\r\nCopyToClipboard.defaultProps = {}\r\n\r\nexport default CopyToClipboard\r\n","Get":"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nclass Get extends React.Component {\r\n  constructor(props, context) {\r\n    super(props, context)\r\n\r\n    this.fetchData = this.fetchData.bind(this)\r\n    this.state = {\r\n      data: null\r\n    }\r\n\r\n    if (this.props.initialDelay) {\r\n      setTimeout(() => this.fetchData(), this.props.initialDelay)\r\n    } else {\r\n      this.fetchData()\r\n    }\r\n  }\r\n\r\n  fetchData() {\r\n    clearTimeout(this.timeout)\r\n\r\n    const get = this.props.getFunction || window.fetch\r\n\r\n    get(this.props.url, this.props.options)\r\n      .then(this.props.mapData)\r\n      .then(data => {\r\n        if (this.props.hasChanged) {\r\n          if (this.props.hasChanged(this.state.data, data)) {\r\n            this.setState({ data })\r\n          }\r\n        } else {\r\n          this.setState({ data })\r\n        }\r\n\r\n        if (this.props.poll) {\r\n          this.timeout = setTimeout(() => {\r\n            if (this.mounted) {\r\n              this.fetchData()\r\n            }\r\n          }, this.props.pollingInterval)\r\n        }\r\n      })\r\n      .catch(error => {\r\n        this.props.onFailed(error)\r\n        if (this.props.poll || this.props.retryOnFail) {\r\n          this.timeout = setTimeout(() => {\r\n            if (this.mounted) {\r\n              this.fetchData()\r\n            }\r\n          }, this.props.pollingInterval)\r\n        }\r\n      })\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.stop && this.props.stop !== prevProps.stop) {\r\n      if (this.timeout) {\r\n        clearTimeout(this.timeout)\r\n        this.timeout = null\r\n      }\r\n      // eslint-disable-next-line react/no-did-update-set-state\r\n      this.setState({ data: null })\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.mounted = true\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout)\r\n      this.timeout = null\r\n    }\r\n    this.mounted = false\r\n  }\r\n\r\n  render() {\r\n    return this.props.children({ data: this.state.data })\r\n  }\r\n}\r\n\r\nGet.propTypes = {\r\n  /**\r\n   * Render function\r\n   */\r\n  children: PropTypes.func,\r\n  /**\r\n   * Url to data\r\n   */\r\n  url: PropTypes.string.isRequired,\r\n  /**\r\n   * fetch function. defaults to window.fetch\r\n   */\r\n  getFunction: PropTypes.func,\r\n  /**\r\n   * Override this to reduce rerenders when polling. (old, nu) => ...\r\n   */\r\n  hasChanged: PropTypes.any,\r\n  /**\r\n   * Override to shape data before it returns in function.\r\n   */\r\n  mapData: PropTypes.func,\r\n  /**\r\n   * Callback when a get fails\r\n   */\r\n  onFailed: PropTypes.func,\r\n  /**\r\n   * Options sent to the fetch function. Headers, body, params etc...\r\n   */\r\n  options: PropTypes.object,\r\n  /**\r\n   * If true will poll url every *pollingInterval*\r\n   */\r\n  poll: PropTypes.bool,\r\n  /**\r\n   * Interval in which polling will be done. Ignored if poll == false\r\n   */\r\n  pollingInterval: PropTypes.number,\r\n  /**\r\n   * Initial delay\r\n   */\r\n  initialDelay: PropTypes.number\r\n}\r\n\r\nexport default Get\r\n\r\nGet.defaultProps = {\r\n  mapData: item => item,\r\n  onFailed: console.error,\r\n  options: {},\r\n  poll: false,\r\n  pollingInterval: 5000,\r\n  initialDelay: 0\r\n}\r\n"}
